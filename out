reading: ./funcscan.php

################################################################################
found a function declaration on line 4 with name funcScan
################################################################################


################################################################################
found a class declaration on line 12 with name FuncScan
################################################################################


################################################################################
found a class method declaration on line 13 with name enterNode
################################################################################


skipping over a function decleration
on line 4 with name funcScan

skipping over class decleration
on line 12 with name FuncScan

tree for enterNode looks like this:
Stmt_ClassMethod(
    flags: MODIFIER_PUBLIC (1)
    byRef: false
    name: Identifier(
        name: enterNode
    )
    params: array(
    )
    returnType: null
    stmts: array(
    )
)

tree for funcScan looks like this:
Stmt_Function(
    byRef: false
    name: Identifier(
        name: funcScan
    )
    params: array(
        0: Param(
            type: Identifier(
                name: string
            )
            byRef: false
            variadic: false
            var: Expr_Variable(
                name: name
            )
            default: null
        )
        1: Param(
            type: Identifier(
                name: array
            )
            byRef: false
            variadic: false
            var: Expr_Variable(
                name: aliases
            )
            default: null
        )
    )
    returnType: null
    stmts: array(
    )
)

tree for FuncScan looks like this:
Stmt_Class(
    flags: 0
    name: Identifier(
        name: FuncScan
    )
    extends: Name(
        parts: array(
            0: NodeVisitorAbstract
        )
    )
    implements: array(
    )
    stmts: array(
        0: Stmt_ClassMethod(
            flags: MODIFIER_PUBLIC (1)
            byRef: false
            name: Identifier(
                name: enterNode
            )
            params: array(
            )
            returnType: null
            stmts: array(
            )
        )
    )
)
instances: Array
(
)
reading: ./treedumper.php
found an array FETCH on line12found an array FETCH on line14found an assignment at line 16
var is: usr
calling is_tainted on: Expr_MethodCall
added usr to clear


tree for enterNode looks like this:
Stmt_ClassMethod(
    flags: MODIFIER_PUBLIC (1)
    byRef: false
    name: Identifier(
        name: enterNode
    )
    params: array(
    )
    returnType: null
    stmts: array(
    )
)

tree for funcScan looks like this:
Stmt_Function(
    byRef: false
    name: Identifier(
        name: funcScan
    )
    params: array(
        0: Param(
            type: Identifier(
                name: string
            )
            byRef: false
            variadic: false
            var: Expr_Variable(
                name: name
            )
            default: null
        )
        1: Param(
            type: Identifier(
                name: array
            )
            byRef: false
            variadic: false
            var: Expr_Variable(
                name: aliases
            )
            default: null
        )
    )
    returnType: null
    stmts: array(
    )
)

tree for FuncScan looks like this:
Stmt_Class(
    flags: 0
    name: Identifier(
        name: FuncScan
    )
    extends: Name(
        parts: array(
            0: NodeVisitorAbstract
        )
    )
    implements: array(
    )
    stmts: array(
        0: Stmt_ClassMethod(
            flags: MODIFIER_PUBLIC (1)
            byRef: false
            name: Identifier(
                name: enterNode
            )
            params: array(
            )
            returnType: null
            stmts: array(
            )
        )
    )
)
instances: Array
(
)
reading: ./var

tree for enterNode looks like this:
Stmt_ClassMethod(
    flags: MODIFIER_PUBLIC (1)
    byRef: false
    name: Identifier(
        name: enterNode
    )
    params: array(
    )
    returnType: null
    stmts: array(
    )
)

tree for funcScan looks like this:
Stmt_Function(
    byRef: false
    name: Identifier(
        name: funcScan
    )
    params: array(
        0: Param(
            type: Identifier(
                name: string
            )
            byRef: false
            variadic: false
            var: Expr_Variable(
                name: name
            )
            default: null
        )
        1: Param(
            type: Identifier(
                name: array
            )
            byRef: false
            variadic: false
            var: Expr_Variable(
                name: aliases
            )
            default: null
        )
    )
    returnType: null
    stmts: array(
    )
)

tree for FuncScan looks like this:
Stmt_Class(
    flags: 0
    name: Identifier(
        name: FuncScan
    )
    extends: Name(
        parts: array(
            0: NodeVisitorAbstract
        )
    )
    implements: array(
    )
    stmts: array(
        0: Stmt_ClassMethod(
            flags: MODIFIER_PUBLIC (1)
            byRef: false
            name: Identifier(
                name: enterNode
            )
            params: array(
            )
            returnType: null
            stmts: array(
            )
        )
    )
)
instances: Array
(
)
reading: ./namespace.php

################################################################################
found a class declaration on line 10 with name InspectorGadget
################################################################################


################################################################################
found a class method declaration on line 12 with name enterNode
################################################################################


skipping over class decleration
on line 10 with name InspectorGadget

tree for enterNode looks like this:
Stmt_ClassMethod(
    flags: MODIFIER_PUBLIC (1)
    byRef: false
    name: Identifier(
        name: enterNode
    )
    params: array(
        0: Param(
            type: Name(
                parts: array(
                    0: Node
                )
            )
            byRef: false
            variadic: false
            var: Expr_Variable(
                name: node
            )
            default: null
        )
    )
    returnType: null
    stmts: array(
    )
)

tree for funcScan looks like this:
Stmt_Function(
    byRef: false
    name: Identifier(
        name: funcScan
    )
    params: array(
        0: Param(
            type: Identifier(
                name: string
            )
            byRef: false
            variadic: false
            var: Expr_Variable(
                name: name
            )
            default: null
        )
        1: Param(
            type: Identifier(
                name: array
            )
            byRef: false
            variadic: false
            var: Expr_Variable(
                name: aliases
            )
            default: null
        )
    )
    returnType: null
    stmts: array(
    )
)

tree for FuncScan looks like this:
Stmt_Class(
    flags: 0
    name: Identifier(
        name: FuncScan
    )
    extends: Name(
        parts: array(
            0: NodeVisitorAbstract
        )
    )
    implements: array(
    )
    stmts: array(
        0: Stmt_ClassMethod(
            flags: MODIFIER_PUBLIC (1)
            byRef: false
            name: Identifier(
                name: enterNode
            )
            params: array(
            )
            returnType: null
            stmts: array(
            )
        )
    )
)

tree for InspectorGadget looks like this:
Stmt_Class(
    flags: 0
    name: Identifier(
        name: InspectorGadget
    )
    extends: Name(
        parts: array(
            0: NodeVisitorAbstract
        )
    )
    implements: array(
    )
    stmts: array(
        0: Stmt_ClassMethod(
            flags: MODIFIER_PUBLIC (1)
            byRef: false
            name: Identifier(
                name: enterNode
            )
            params: array(
                0: Param(
                    type: Name(
                        parts: array(
                            0: Node
                        )
                    )
                    byRef: false
                    variadic: false
                    var: Expr_Variable(
                        name: node
                    )
                    default: null
                )
            )
            returnType: null
            stmts: array(
            )
        )
    )
)
instances: Array
(
)
reading: ./SSS.php
found an assignment at line 3
var is: sanitizers
calling is_tainted on: Expr_Array
added sanitizers to clear

found an assignment at line 24
var is: sinks
calling is_tainted on: Expr_Array
added sinks to clear

found an assignment at line 54
var is: sources
calling is_tainted on: Expr_Array
added sources to clear


tree for enterNode looks like this:
Stmt_ClassMethod(
    flags: MODIFIER_PUBLIC (1)
    byRef: false
    name: Identifier(
        name: enterNode
    )
    params: array(
        0: Param(
            type: Name(
                parts: array(
                    0: Node
                )
            )
            byRef: false
            variadic: false
            var: Expr_Variable(
                name: node
            )
            default: null
        )
    )
    returnType: null
    stmts: array(
    )
)

tree for funcScan looks like this:
Stmt_Function(
    byRef: false
    name: Identifier(
        name: funcScan
    )
    params: array(
        0: Param(
            type: Identifier(
                name: string
            )
            byRef: false
            variadic: false
            var: Expr_Variable(
                name: name
            )
            default: null
        )
        1: Param(
            type: Identifier(
                name: array
            )
            byRef: false
            variadic: false
            var: Expr_Variable(
                name: aliases
            )
            default: null
        )
    )
    returnType: null
    stmts: array(
    )
)

tree for FuncScan looks like this:
Stmt_Class(
    flags: 0
    name: Identifier(
        name: FuncScan
    )
    extends: Name(
        parts: array(
            0: NodeVisitorAbstract
        )
    )
    implements: array(
    )
    stmts: array(
        0: Stmt_ClassMethod(
            flags: MODIFIER_PUBLIC (1)
            byRef: false
            name: Identifier(
                name: enterNode
            )
            params: array(
            )
            returnType: null
            stmts: array(
            )
        )
    )
)

tree for InspectorGadget looks like this:
Stmt_Class(
    flags: 0
    name: Identifier(
        name: InspectorGadget
    )
    extends: Name(
        parts: array(
            0: NodeVisitorAbstract
        )
    )
    implements: array(
    )
    stmts: array(
        0: Stmt_ClassMethod(
            flags: MODIFIER_PUBLIC (1)
            byRef: false
            name: Identifier(
                name: enterNode
            )
            params: array(
                0: Param(
                    type: Name(
                        parts: array(
                            0: Node
                        )
                    )
                    byRef: false
                    variadic: false
                    var: Expr_Variable(
                        name: node
                    )
                    default: null
                )
            )
            returnType: null
            stmts: array(
            )
        )
    )
)
instances: Array
(
)
reading: ./to-do

tree for enterNode looks like this:
Stmt_ClassMethod(
    flags: MODIFIER_PUBLIC (1)
    byRef: false
    name: Identifier(
        name: enterNode
    )
    params: array(
        0: Param(
            type: Name(
                parts: array(
                    0: Node
                )
            )
            byRef: false
            variadic: false
            var: Expr_Variable(
                name: node
            )
            default: null
        )
    )
    returnType: null
    stmts: array(
    )
)

tree for funcScan looks like this:
Stmt_Function(
    byRef: false
    name: Identifier(
        name: funcScan
    )
    params: array(
        0: Param(
            type: Identifier(
                name: string
            )
            byRef: false
            variadic: false
            var: Expr_Variable(
                name: name
            )
            default: null
        )
        1: Param(
            type: Identifier(
                name: array
            )
            byRef: false
            variadic: false
            var: Expr_Variable(
                name: aliases
            )
            default: null
        )
    )
    returnType: null
    stmts: array(
    )
)

tree for FuncScan looks like this:
Stmt_Class(
    flags: 0
    name: Identifier(
        name: FuncScan
    )
    extends: Name(
        parts: array(
            0: NodeVisitorAbstract
        )
    )
    implements: array(
    )
    stmts: array(
        0: Stmt_ClassMethod(
            flags: MODIFIER_PUBLIC (1)
            byRef: false
            name: Identifier(
                name: enterNode
            )
            params: array(
            )
            returnType: null
            stmts: array(
            )
        )
    )
)

tree for InspectorGadget looks like this:
Stmt_Class(
    flags: 0
    name: Identifier(
        name: InspectorGadget
    )
    extends: Name(
        parts: array(
            0: NodeVisitorAbstract
        )
    )
    implements: array(
    )
    stmts: array(
        0: Stmt_ClassMethod(
            flags: MODIFIER_PUBLIC (1)
            byRef: false
            name: Identifier(
                name: enterNode
            )
            params: array(
                0: Param(
                    type: Name(
                        parts: array(
                            0: Node
                        )
                    )
                    byRef: false
                    variadic: false
                    var: Expr_Variable(
                        name: node
                    )
                    default: null
                )
            )
            returnType: null
            stmts: array(
            )
        )
    )
)
instances: Array
(
)
reading: ./dummy_project/f1.php
found an assignment at line 3
var is: mckenzie
calling is_tainted on: Scalar_String
added mckenzie to clear


tree for enterNode looks like this:
Stmt_ClassMethod(
    flags: MODIFIER_PUBLIC (1)
    byRef: false
    name: Identifier(
        name: enterNode
    )
    params: array(
        0: Param(
            type: Name(
                parts: array(
                    0: Node
                )
            )
            byRef: false
            variadic: false
            var: Expr_Variable(
                name: node
            )
            default: null
        )
    )
    returnType: null
    stmts: array(
    )
)

tree for funcScan looks like this:
Stmt_Function(
    byRef: false
    name: Identifier(
        name: funcScan
    )
    params: array(
        0: Param(
            type: Identifier(
                name: string
            )
            byRef: false
            variadic: false
            var: Expr_Variable(
                name: name
            )
            default: null
        )
        1: Param(
            type: Identifier(
                name: array
            )
            byRef: false
            variadic: false
            var: Expr_Variable(
                name: aliases
            )
            default: null
        )
    )
    returnType: null
    stmts: array(
    )
)

tree for FuncScan looks like this:
Stmt_Class(
    flags: 0
    name: Identifier(
        name: FuncScan
    )
    extends: Name(
        parts: array(
            0: NodeVisitorAbstract
        )
    )
    implements: array(
    )
    stmts: array(
        0: Stmt_ClassMethod(
            flags: MODIFIER_PUBLIC (1)
            byRef: false
            name: Identifier(
                name: enterNode
            )
            params: array(
            )
            returnType: null
            stmts: array(
            )
        )
    )
)

tree for InspectorGadget looks like this:
Stmt_Class(
    flags: 0
    name: Identifier(
        name: InspectorGadget
    )
    extends: Name(
        parts: array(
            0: NodeVisitorAbstract
        )
    )
    implements: array(
    )
    stmts: array(
        0: Stmt_ClassMethod(
            flags: MODIFIER_PUBLIC (1)
            byRef: false
            name: Identifier(
                name: enterNode
            )
            params: array(
                0: Param(
                    type: Name(
                        parts: array(
                            0: Node
                        )
                    )
                    byRef: false
                    variadic: false
                    var: Expr_Variable(
                        name: node
                    )
                    default: null
                )
            )
            returnType: null
            stmts: array(
            )
        )
    )
)
instances: Array
(
)
reading: ./dummy_project/g4.php
found an assignment at line 3
var is: var
calling is_tainted on: Scalar_String
added var to clear


tree for enterNode looks like this:
Stmt_ClassMethod(
    flags: MODIFIER_PUBLIC (1)
    byRef: false
    name: Identifier(
        name: enterNode
    )
    params: array(
        0: Param(
            type: Name(
                parts: array(
                    0: Node
                )
            )
            byRef: false
            variadic: false
            var: Expr_Variable(
                name: node
            )
            default: null
        )
    )
    returnType: null
    stmts: array(
    )
)

tree for funcScan looks like this:
Stmt_Function(
    byRef: false
    name: Identifier(
        name: funcScan
    )
    params: array(
        0: Param(
            type: Identifier(
                name: string
            )
            byRef: false
            variadic: false
            var: Expr_Variable(
                name: name
            )
            default: null
        )
        1: Param(
            type: Identifier(
                name: array
            )
            byRef: false
            variadic: false
            var: Expr_Variable(
                name: aliases
            )
            default: null
        )
    )
    returnType: null
    stmts: array(
    )
)

tree for FuncScan looks like this:
Stmt_Class(
    flags: 0
    name: Identifier(
        name: FuncScan
    )
    extends: Name(
        parts: array(
            0: NodeVisitorAbstract
        )
    )
    implements: array(
    )
    stmts: array(
        0: Stmt_ClassMethod(
            flags: MODIFIER_PUBLIC (1)
            byRef: false
            name: Identifier(
                name: enterNode
            )
            params: array(
            )
            returnType: null
            stmts: array(
            )
        )
    )
)

tree for InspectorGadget looks like this:
Stmt_Class(
    flags: 0
    name: Identifier(
        name: InspectorGadget
    )
    extends: Name(
        parts: array(
            0: NodeVisitorAbstract
        )
    )
    implements: array(
    )
    stmts: array(
        0: Stmt_ClassMethod(
            flags: MODIFIER_PUBLIC (1)
            byRef: false
            name: Identifier(
                name: enterNode
            )
            params: array(
                0: Param(
                    type: Name(
                        parts: array(
                            0: Node
                        )
                    )
                    byRef: false
                    variadic: false
                    var: Expr_Variable(
                        name: node
                    )
                    default: null
                )
            )
            returnType: null
            stmts: array(
            )
        )
    )
)
instances: Array
(
)
reading: ./README.md

tree for enterNode looks like this:
Stmt_ClassMethod(
    flags: MODIFIER_PUBLIC (1)
    byRef: false
    name: Identifier(
        name: enterNode
    )
    params: array(
        0: Param(
            type: Name(
                parts: array(
                    0: Node
                )
            )
            byRef: false
            variadic: false
            var: Expr_Variable(
                name: node
            )
            default: null
        )
    )
    returnType: null
    stmts: array(
    )
)

tree for funcScan looks like this:
Stmt_Function(
    byRef: false
    name: Identifier(
        name: funcScan
    )
    params: array(
        0: Param(
            type: Identifier(
                name: string
            )
            byRef: false
            variadic: false
            var: Expr_Variable(
                name: name
            )
            default: null
        )
        1: Param(
            type: Identifier(
                name: array
            )
            byRef: false
            variadic: false
            var: Expr_Variable(
                name: aliases
            )
            default: null
        )
    )
    returnType: null
    stmts: array(
    )
)

tree for FuncScan looks like this:
Stmt_Class(
    flags: 0
    name: Identifier(
        name: FuncScan
    )
    extends: Name(
        parts: array(
            0: NodeVisitorAbstract
        )
    )
    implements: array(
    )
    stmts: array(
        0: Stmt_ClassMethod(
            flags: MODIFIER_PUBLIC (1)
            byRef: false
            name: Identifier(
                name: enterNode
            )
            params: array(
            )
            returnType: null
            stmts: array(
            )
        )
    )
)

tree for InspectorGadget looks like this:
Stmt_Class(
    flags: 0
    name: Identifier(
        name: InspectorGadget
    )
    extends: Name(
        parts: array(
            0: NodeVisitorAbstract
        )
    )
    implements: array(
    )
    stmts: array(
        0: Stmt_ClassMethod(
            flags: MODIFIER_PUBLIC (1)
            byRef: false
            name: Identifier(
                name: enterNode
            )
            params: array(
                0: Param(
                    type: Name(
                        parts: array(
                            0: Node
                        )
                    )
                    byRef: false
                    variadic: false
                    var: Expr_Variable(
                        name: node
                    )
                    default: null
                )
            )
            returnType: null
            stmts: array(
            )
        )
    )
)
instances: Array
(
)
reading: ./merged.php

################################################################################
found a class declaration on line 19 with name Snail
################################################################################


################################################################################
found a class method declaration on line 21 with name enterNode
################################################################################


################################################################################
found a class declaration on line 108 with name Screamer
################################################################################


################################################################################
found a class method declaration on line 110 with name enterNode
################################################################################


################################################################################
found a class declaration on line 129 with name Librarian
################################################################################


################################################################################
found a class method declaration on line 131 with name enterNode
################################################################################


################################################################################
found a class declaration on line 161 with name ParentConnector
################################################################################


################################################################################
found a class method declaration on line 163 with name beforeTraverse
################################################################################


################################################################################
found a class method declaration on line 166 with name enterNode
################################################################################


################################################################################
found a class method declaration on line 172 with name leaveNode
################################################################################


################################################################################
found a function declaration on line 182 with name is_tainted
################################################################################


################################################################################
found a function declaration on line 200 with name climb_up
################################################################################


################################################################################
found a function declaration on line 236 with name is_safe
################################################################################


found assingment with call to 'new' on line :11
CLEAR is an instance of Ds\Set


found assingment with call to 'new' on line :12
DIRTY is an instance of Ds\Set

found an assignment at line 14
var is: CLASSES
calling is_tainted on: Expr_Array
added CLASSES to clear

found an assignment at line 15
var is: FUNCTIONS
calling is_tainted on: Expr_Array
added FUNCTIONS to clear

found an assignment at line 16
var is: INSTANCES
calling is_tainted on: Expr_Array
added INSTANCES to clear

found an assignment at line 17
var is: METHODS
calling is_tainted on: Expr_Array
added METHODS to clear


skipping over class decleration
on line 19 with name Snail

skipping over class decleration
on line 108 with name Screamer

skipping over class decleration
on line 129 with name Librarian

skipping over class decleration
on line 161 with name ParentConnector

skipping over a function decleration
on line 182 with name is_tainted
found an assignment at line 199
var is: flag
calling is_tainted on: Scalar_LNumber
added flag to clear


skipping over a function decleration
on line 200 with name climb_up

skipping over a function decleration
on line 236 with name is_safe
found an assignment at line 254
var is: parser
calling is_tainted on: Expr_MethodCall
added parser to clear


found assingment with call to 'new' on line :256
traverser is an instance of NodeTraverser


found assingment with call to 'new' on line :259
classfinder is an instance of NodeTraverser


found assingment with call to 'new' on line :262
pretraverser is an instance of NodeTraverser


found assingment with call to 'new' on line :273
rii is an instance of RecursiveIteratorIterator

found an assignment at line 275
var is: files
calling is_tainted on: Expr_Array
added files to clear

found an array FETCH on line283found an assignment at line 295
var is: code
calling is_tainted on: Expr_FuncCall
added code to clear

found an assignment at line 301
var is: ast
calling is_tainted on: Expr_MethodCall
added ast to clear

found an assignment at line 307
var is: ast
calling is_tainted on: Expr_MethodCall

found assingment with call to 'new' on line :311
dumper is an instance of NodeDumper


tree for enterNode looks like this:
Stmt_ClassMethod(
    flags: MODIFIER_PUBLIC (1)
    byRef: false
    name: Identifier(
        name: enterNode
    )
    params: array(
        0: Param(
            type: Name(
                parts: array(
                    0: Node
                )
            )
            byRef: false
            variadic: false
            var: Expr_Variable(
                name: node
            )
            default: null
        )
    )
    returnType: null
    stmts: array(
        0: Stmt_If(
            cond: Expr_BooleanNot(
                expr: Expr_Empty(
                    expr: Expr_PropertyFetch(
                        var: Expr_Variable(
                            name: this
                        )
                        name: Identifier(
                            name: stack
                        )
                    )
                )
            )
            stmts: array(
                0: Stmt_Expression(
                    expr: Expr_MethodCall(
                        var: Expr_Variable(
                            name: node
                        )
                        name: Identifier(
                            name: setAttribute
                        )
                        args: array(
                            0: Arg(
                                value: Scalar_String(
                                    value: parent
                                )
                                byRef: false
                                unpack: false
                            )
                            1: Arg(
                                value: Expr_ArrayDimFetch(
                                    var: Expr_PropertyFetch(
                                        var: Expr_Variable(
                                            name: this
                                        )
                                        name: Identifier(
                                            name: stack
                                        )
                                    )
                                    dim: Expr_BinaryOp_Minus(
                                        left: Expr_FuncCall(
                                            name: Name(
                                                parts: array(
                                                    0: count
                                                )
                                            )
                                            args: array(
                                                0: Arg(
                                                    value: Expr_PropertyFetch(
                                                        var: Expr_Variable(
                                                            name: this
                                                        )
                                                        name: Identifier(
                                                            name: stack
                                                        )
                                                    )
                                                    byRef: false
                                                    unpack: false
                                                )
                                            )
                                        )
                                        right: Scalar_LNumber(
                                            value: 1
                                        )
                                    )
                                )
                                byRef: false
                                unpack: false
                            )
                        )
                    )
                )
            )
            elseifs: array(
            )
            else: null
        )
        1: Stmt_Expression(
            expr: Expr_Assign(
                var: Expr_ArrayDimFetch(
                    var: Expr_PropertyFetch(
                        var: Expr_Variable(
                            name: this
                        )
                        name: Identifier(
                            name: stack
                        )
                    )
                    dim: null
                )
                expr: Expr_Variable(
                    name: node
                )
            )
        )
    )
)

tree for beforeTraverse looks like this:
Stmt_ClassMethod(
    flags: MODIFIER_PUBLIC (1)
    byRef: false
    name: Identifier(
        name: beforeTraverse
    )
    params: array(
        0: Param(
            type: Identifier(
                name: array
            )
            byRef: false
            variadic: false
            var: Expr_Variable(
                name: nodes
            )
            default: null
        )
    )
    returnType: null
    stmts: array(
        0: Stmt_Expression(
            expr: Expr_Assign(
                var: Expr_PropertyFetch(
                    var: Expr_Variable(
                        name: this
                    )
                    name: Identifier(
                        name: stack
                    )
                )
                expr: Expr_Array(
                    items: array(
                    )
                )
            )
        )
    )
)

tree for leaveNode looks like this:
Stmt_ClassMethod(
    flags: MODIFIER_PUBLIC (1)
    byRef: false
    name: Identifier(
        name: leaveNode
    )
    params: array(
        0: Param(
            type: Name(
                parts: array(
                    0: Node
                )
            )
            byRef: false
            variadic: false
            var: Expr_Variable(
                name: node
            )
            default: null
        )
    )
    returnType: null
    stmts: array(
        0: Stmt_Expression(
            expr: Expr_FuncCall(
                name: Name(
                    parts: array(
                        0: array_pop
                    )
                )
                args: array(
                    0: Arg(
                        value: Expr_PropertyFetch(
                            var: Expr_Variable(
                                name: this
                            )
                            name: Identifier(
                                name: stack
                            )
                        )
                        byRef: false
                        unpack: false
                    )
                )
            )
        )
    )
)

tree for funcScan looks like this:
Stmt_Function(
    byRef: false
    name: Identifier(
        name: funcScan
    )
    params: array(
        0: Param(
            type: Identifier(
                name: string
            )
            byRef: false
            variadic: false
            var: Expr_Variable(
                name: name
            )
            default: null
        )
        1: Param(
            type: Identifier(
                name: array
            )
            byRef: false
            variadic: false
            var: Expr_Variable(
                name: aliases
            )
            default: null
        )
    )
    returnType: null
    stmts: array(
    )
)

tree for is_tainted looks like this:
Stmt_Function(
    byRef: false
    name: Identifier(
        name: is_tainted
    )
    params: array(
        0: Param(
            type: Name(
                parts: array(
                    0: Node
                )
            )
            byRef: false
            variadic: false
            var: Expr_Variable(
                name: node
            )
            default: null
        )
    )
    returnType: null
    stmts: array(
        0: Stmt_Global(
            vars: array(
                0: Expr_Variable(
                    name: root
                )
            )
        )
        1: Stmt_Global(
            vars: array(
                0: Expr_Variable(
                    name: tainted
                )
            )
        )
        2: Stmt_Expression(
            expr: Expr_Assign(
                var: Expr_Variable(
                    name: root
                )
                expr: Expr_MethodCall(
                    var: Expr_Variable(
                        name: node
                    )
                    name: Identifier(
                        name: getAttribute
                    )
                    args: array(
                        0: Arg(
                            value: Scalar_String(
                                value: parent
                            )
                            byRef: false
                            unpack: false
                        )
                    )
                )
            )
        )
        3: Stmt_Expression(
            expr: Expr_Assign(
                var: Expr_Variable(
                    name: tainted
                )
                expr: Expr_ConstFetch(
                    name: Name(
                        parts: array(
                            0: false
                        )
                    )
                )
            )
        )
        4: Stmt_Expression(
            expr: Expr_Assign(
                var: Expr_Variable(
                    name: traverser
                )
                expr: Expr_New(
                    class: Name(
                        parts: array(
                            0: NodeTraverser
                        )
                    )
                    args: array(
                    )
                )
            )
        )
        5: Stmt_Expression(
            expr: Expr_MethodCall(
                var: Expr_Variable(
                    name: traverser
                )
                name: Identifier(
                    name: addVisitor
                )
                args: array(
                    0: Arg(
                        value: Expr_New(
                            class: Name(
                                parts: array(
                                    0: Screamer
                                )
                            )
                            args: array(
                            )
                        )
                        byRef: false
                        unpack: false
                    )
                )
            )
        )
        6: Stmt_Expression(
            expr: Expr_MethodCall(
                var: Expr_Variable(
                    name: traverser
                )
                name: Identifier(
                    name: traverse
                )
                args: array(
                    0: Arg(
                        value: Expr_Array(
                            items: array(
                                0: Expr_ArrayItem(
                                    key: null
                                    value: Expr_Variable(
                                        name: node
                                    )
                                    byRef: false
                                    unpack: false
                                )
                            )
                        )
                        byRef: false
                        unpack: false
                    )
                )
            )
        )
        7: Stmt_Return(
            expr: Expr_Variable(
                name: tainted
            )
        )
    )
)

tree for climb_up looks like this:
Stmt_Function(
    byRef: false
    name: Identifier(
        name: climb_up
    )
    params: array(
        0: Param(
            type: Name(
                parts: array(
                    0: Node
                )
            )
            byRef: false
            variadic: false
            var: Expr_Variable(
                name: node
            )
            default: null
        )
    )
    returnType: null
    stmts: array(
        0: Stmt_Global(
            vars: array(
                0: Expr_Variable(
                    name: flag
                )
            )
        )
        1: Stmt_Global(
            vars: array(
                0: Expr_Variable(
                    name: tainted
                )
            )
        )
        2: Stmt_Global(
            vars: array(
                0: Expr_Variable(
                    name: root
                )
            )
        )
        3: Stmt_If(
            cond: Expr_BinaryOp_Equal(
                left: Expr_Variable(
                    name: flag
                )
                right: Scalar_LNumber(
                    value: 1
                )
            )
            stmts: array(
                0: Stmt_Echo(
                    exprs: array(
                        0: Scalar_String(
                            value: short-circuiting climb...
                        
                        )
                    )
                )
                1: Stmt_Expression(
                    expr: Expr_Assign(
                        var: Expr_Variable(
                            name: flag
                        )
                        expr: Scalar_LNumber(
                            value: 0
                        )
                    )
                )
                2: Stmt_Return(
                    expr: Expr_ConstFetch(
                        name: Name(
                            parts: array(
                                0: true
                            )
                        )
                    )
                )
            )
            elseifs: array(
            )
            else: null
        )
        4: Stmt_If(
            cond: Expr_BinaryOp_BooleanAnd(
                left: Expr_MethodCall(
                    var: Expr_Variable(
                        name: node
                    )
                    name: Identifier(
                        name: hasAttribute
                    )
                    args: array(
                        0: Arg(
                            value: Scalar_String(
                                value: parent
                            )
                            byRef: false
                            unpack: false
                        )
                    )
                )
                right: Expr_BinaryOp_NotIdentical(
                    left: Expr_Variable(
                        name: node
                    )
                    right: Expr_Variable(
                        name: root
                    )
                )
            )
            stmts: array(
                0: Stmt_Expression(
                    expr: Expr_Assign(
                        var: Expr_Variable(
                            name: parent
                        )
                        expr: Expr_MethodCall(
                            var: Expr_Variable(
                                name: node
                            )
                            name: Identifier(
                                name: getAttribute
                            )
                            args: array(
                                0: Arg(
                                    value: Scalar_String(
                                        value: parent
                                    )
                                    byRef: false
                                    unpack: false
                                )
                            )
                        )
                    )
                )
                1: Stmt_Expression(
                    expr: Expr_Assign(
                        var: Expr_Variable(
                            name: parent_type
                        )
                        expr: Expr_MethodCall(
                            var: Expr_Variable(
                                name: parent
                            )
                            name: Identifier(
                                name: getType
                            )
                            args: array(
                            )
                        )
                    )
                )
                2: Stmt_Expression(
                    expr: Expr_Assign(
                        var: Expr_Variable(
                            name: node_type
                        )
                        expr: Expr_MethodCall(
                            var: Expr_Variable(
                                name: node
                            )
                            name: Identifier(
                                name: getType
                            )
                            args: array(
                            )
                        )
                    )
                )
                3: Stmt_Echo(
                    exprs: array(
                        0: Expr_BinaryOp_Concat(
                            left: Expr_Variable(
                                name: node_type
                            )
                            right: Scalar_Encapsed(
                                parts: array(
                                    0: Scalar_EncapsedStringPart(
                                        value:  node has parent node with type: '
                                    )
                                    1: Expr_Variable(
                                        name: parent_type
                                    )
                                    2: Scalar_EncapsedStringPart(
                                        value: '
                                    
                                    )
                                )
                            )
                        )
                    )
                )
                4: Stmt_If(
                    cond: Expr_BinaryOp_Equal(
                        left: Expr_Variable(
                            name: node_type
                        )
                        right: Scalar_String(
                            value: Expr_FuncCall
                        )
                    )
                    stmts: array(
                        0: Stmt_Echo(
                            exprs: array(
                                0: Scalar_String(
                                    value: caught function node. 
                                )
                            )
                        )
                        1: Stmt_Expression(
                            expr: Expr_Assign(
                                var: Expr_Variable(
                                    name: flag
                                )
                                expr: Expr_FuncCall(
                                    name: Name(
                                        parts: array(
                                            0: is_safe
                                        )
                                    )
                                    args: array(
                                        0: Arg(
                                            value: Expr_Variable(
                                                name: node
                                            )
                                            byRef: false
                                            unpack: false
                                        )
                                    )
                                )
                            )
                        )
                    )
                    elseifs: array(
                    )
                    else: null
                )
                5: Stmt_Return(
                    expr: Expr_FuncCall(
                        name: Name(
                            parts: array(
                                0: climb_up
                            )
                        )
                        args: array(
                            0: Arg(
                                value: Expr_Variable(
                                    name: parent
                                )
                                byRef: false
                                unpack: false
                            )
                        )
                    )
                )
            )
            elseifs: array(
                0: Stmt_ElseIf(
                    cond: Expr_BinaryOp_Identical(
                        left: Expr_Variable(
                            name: node
                        )
                        right: Expr_Variable(
                            name: root
                        )
                    )
                    stmts: array(
                        0: Stmt_Echo(
                            exprs: array(
                                0: Scalar_String(
                                    value: reached root, stopping climb 
                                
                                )
                            )
                        )
                        1: Stmt_Expression(
                            expr: Expr_Assign(
                                var: Expr_Variable(
                                    name: tainted
                                )
                                expr: Expr_ConstFetch(
                                    name: Name(
                                        parts: array(
                                            0: true
                                        )
                                    )
                                )
                            )
                        )
                        2: Stmt_Return(
                            expr: Expr_ConstFetch(
                                name: Name(
                                    parts: array(
                                        0: false
                                    )
                                )
                            )
                        )
                    )
                )
            )
            else: Stmt_Else(
                stmts: array(
                    0: Stmt_Expression(
                        expr: Expr_Assign(
                            var: Expr_Variable(
                                name: node_type
                            )
                            expr: Expr_MethodCall(
                                var: Expr_Variable(
                                    name: node
                                )
                                name: Identifier(
                                    name: getType
                                )
                                args: array(
                                )
                            )
                        )
                    )
                    1: Stmt_Echo(
                        exprs: array(
                            0: Expr_BinaryOp_Concat(
                                left: Expr_BinaryOp_Concat(
                                    left: Scalar_String(
                                        value: node 
                                    )
                                    right: Expr_Variable(
                                        name: node_type
                                    )
                                )
                                right: Scalar_String(
                                    value:  does not have a parent
                                
                                )
                            )
                        )
                    )
                    2: Stmt_Expression(
                        expr: Expr_Assign(
                            var: Expr_Variable(
                                name: tainted
                            )
                            expr: Expr_ConstFetch(
                                name: Name(
                                    parts: array(
                                        0: true
                                    )
                                )
                            )
                        )
                    )
                    3: Stmt_Return(
                        expr: Expr_ConstFetch(
                            name: Name(
                                parts: array(
                                    0: false
                                )
                            )
                        )
                    )
                )
            )
        )
    )
)

tree for is_safe looks like this:
Stmt_Function(
    byRef: false
    name: Identifier(
        name: is_safe
    )
    params: array(
        0: Param(
            type: Name(
                parts: array(
                    0: Node
                )
            )
            byRef: false
            variadic: false
            var: Expr_Variable(
                name: func_node
            )
            default: null
        )
    )
    returnType: null
    stmts: array(
        0: Stmt_Expression(
            expr: Expr_Include(
                expr: Scalar_String(
                    value: /home/chao/sql-injection-scanner/SSS.php
                )
                type: TYPE_INCLUDE (1)
            )
        )
        1: Stmt_Echo(
            exprs: array(
                0: Expr_BinaryOp_Concat(
                    left: Expr_BinaryOp_Concat(
                        left: Scalar_String(
                            value: checking if 
                        )
                        right: Expr_MethodCall(
                            var: Expr_Variable(
                                name: func_node
                            )
                            name: Identifier(
                                name: getType
                            )
                            args: array(
                            )
                        )
                    )
                    right: Scalar_String(
                        value:  is in sanitizers list...
                    
                    )
                )
            )
        )
        2: Stmt_Expression(
            expr: Expr_Assign(
                var: Expr_Variable(
                    name: fname
                )
                expr: Expr_PropertyFetch(
                    var: Expr_Variable(
                        name: func_node
                    )
                    name: Identifier(
                        name: name
                    )
                )
            )
        )
        3: Stmt_Echo(
            exprs: array(
                0: Expr_BinaryOp_Concat(
                    left: Expr_BinaryOp_Concat(
                        left: Scalar_String(
                            value: NAME : 
                        )
                        right: Expr_Variable(
                            name: fname
                        )
                    )
                    right: Scalar_String(
                        value: 
                    
                    )
                )
            )
        )
        4: Stmt_If(
            cond: Expr_FuncCall(
                name: Name(
                    parts: array(
                        0: in_array
                    )
                )
                args: array(
                    0: Arg(
                        value: Expr_Variable(
                            name: fname
                        )
                        byRef: false
                        unpack: false
                    )
                    1: Arg(
                        value: Expr_Variable(
                            name: sanitizers
                        )
                        byRef: false
                        unpack: false
                    )
                )
            )
            stmts: array(
                0: Stmt_Echo(
                    exprs: array(
                        0: Scalar_String(
                            value: function is in sanitizers list. input is (probably) sanitized.
                        
                        )
                    )
                )
                1: Stmt_Return(
                    expr: Scalar_LNumber(
                        value: 1
                    )
                )
            )
            elseifs: array(
            )
            else: Stmt_Else(
                stmts: array(
                    0: Stmt_Echo(
                        exprs: array(
                            0: Scalar_String(
                                value: function call is not sanitizer function
                            
                            )
                        )
                    )
                    1: Stmt_Echo(
                        exprs: array(
                            0: Scalar_String(
                                value: continue climb..
                            
                            )
                        )
                    )
                    2: Stmt_Return(
                        expr: Scalar_LNumber(
                            value: 0
                        )
                    )
                )
            )
        )
    )
)

tree for FuncScan looks like this:
Stmt_Class(
    flags: 0
    name: Identifier(
        name: FuncScan
    )
    extends: Name(
        parts: array(
            0: NodeVisitorAbstract
        )
    )
    implements: array(
    )
    stmts: array(
        0: Stmt_ClassMethod(
            flags: MODIFIER_PUBLIC (1)
            byRef: false
            name: Identifier(
                name: enterNode
            )
            params: array(
            )
            returnType: null
            stmts: array(
            )
        )
    )
)

tree for InspectorGadget looks like this:
Stmt_Class(
    flags: 0
    name: Identifier(
        name: InspectorGadget
    )
    extends: Name(
        parts: array(
            0: NodeVisitorAbstract
        )
    )
    implements: array(
    )
    stmts: array(
        0: Stmt_ClassMethod(
            flags: MODIFIER_PUBLIC (1)
            byRef: false
            name: Identifier(
                name: enterNode
            )
            params: array(
                0: Param(
                    type: Name(
                        parts: array(
                            0: Node
                        )
                    )
                    byRef: false
                    variadic: false
                    var: Expr_Variable(
                        name: node
                    )
                    default: null
                )
            )
            returnType: null
            stmts: array(
            )
        )
    )
)

tree for Snail looks like this:
Stmt_Class(
    flags: 0
    name: Identifier(
        name: Snail
    )
    extends: Name(
        parts: array(
            0: NodeVisitorAbstract
        )
    )
    implements: array(
    )
    stmts: array(
        0: Stmt_ClassMethod(
            flags: MODIFIER_PUBLIC (1)
            byRef: false
            name: Identifier(
                name: enterNode
            )
            params: array(
                0: Param(
                    type: Name(
                        parts: array(
                            0: Node
                        )
                    )
                    byRef: false
                    variadic: false
                    var: Expr_Variable(
                        name: node
                    )
                    default: null
                )
            )
            returnType: null
            stmts: array(
                0: Stmt_Expression(
                    expr: Expr_Include(
                        expr: Scalar_String(
                            value: /home/chao/sql-injection-scanner/SSS.php
                        )
                        type: TYPE_INCLUDE (1)
                    )
                )
                1: Stmt_Global(
                    vars: array(
                        0: Expr_Variable(
                            name: CLEAR
                        )
                    )
                )
                2: Stmt_Global(
                    vars: array(
                        0: Expr_Variable(
                            name: DIRTY
                        )
                    )
                )
                3: Stmt_Global(
                    vars: array(
                        0: Expr_Variable(
                            name: INSTANCES
                        )
                    )
                )
                4: Stmt_If(
                    cond: Expr_Instanceof(
                        expr: Expr_Variable(
                            name: node
                        )
                        class: Name(
                            parts: array(
                                0: Node
                                1: Stmt
                                2: Class_
                            )
                        )
                    )
                    stmts: array(
                        0: Stmt_Echo(
                            exprs: array(
                                0: Scalar_String(
                                    value: 
                                skipping over class decleration
                                
                                )
                            )
                        )
                        1: Stmt_Echo(
                            exprs: array(
                                0: Expr_BinaryOp_Concat(
                                    left: Expr_BinaryOp_Concat(
                                        left: Expr_BinaryOp_Concat(
                                            left: Expr_BinaryOp_Concat(
                                                left: Scalar_String(
                                                    value: on line 
                                                )
                                                right: Expr_MethodCall(
                                                    var: Expr_Variable(
                                                        name: node
                                                    )
                                                    name: Identifier(
                                                        name: getLine
                                                    )
                                                    args: array(
                                                    )
                                                )
                                            )
                                            right: Scalar_String(
                                                value:  with name 
                                            )
                                        )
                                        right: Expr_PropertyFetch(
                                            var: Expr_Variable(
                                                name: node
                                            )
                                            name: Identifier(
                                                name: name
                                            )
                                        )
                                    )
                                    right: Scalar_String(
                                        value: 
                                    
                                    )
                                )
                            )
                        )
                        2: Stmt_Return(
                            expr: Expr_ClassConstFetch(
                                class: Name(
                                    parts: array(
                                        0: NodeTraverser
                                    )
                                )
                                name: Identifier(
                                    name: DONT_TRAVERSE_CHILDREN
                                )
                            )
                        )
                    )
                    elseifs: array(
                        0: Stmt_ElseIf(
                            cond: Expr_Instanceof(
                                expr: Expr_Variable(
                                    name: node
                                )
                                class: Name(
                                    parts: array(
                                        0: Node
                                        1: Stmt
                                        2: Function_
                                    )
                                )
                            )
                            stmts: array(
                                0: Stmt_Echo(
                                    exprs: array(
                                        0: Scalar_String(
                                            value: 
                                        skipping over a function decleration
                                        
                                        )
                                    )
                                )
                                1: Stmt_Echo(
                                    exprs: array(
                                        0: Expr_BinaryOp_Concat(
                                            left: Expr_BinaryOp_Concat(
                                                left: Expr_BinaryOp_Concat(
                                                    left: Expr_BinaryOp_Concat(
                                                        left: Scalar_String(
                                                            value: on line 
                                                        )
                                                        right: Expr_MethodCall(
                                                            var: Expr_Variable(
                                                                name: node
                                                            )
                                                            name: Identifier(
                                                                name: getLine
                                                            )
                                                            args: array(
                                                            )
                                                        )
                                                    )
                                                    right: Scalar_String(
                                                        value:  with name 
                                                    )
                                                )
                                                right: Expr_PropertyFetch(
                                                    var: Expr_Variable(
                                                        name: node
                                                    )
                                                    name: Identifier(
                                                        name: name
                                                    )
                                                )
                                            )
                                            right: Scalar_String(
                                                value: 
                                            
                                            )
                                        )
                                    )
                                )
                                2: Stmt_Return(
                                    expr: Expr_ClassConstFetch(
                                        class: Name(
                                            parts: array(
                                                0: NodeTraverser
                                            )
                                        )
                                        name: Identifier(
                                            name: DONT_TRAVERSE_CHILDREN
                                        )
                                    )
                                )
                            )
                        )
                        1: Stmt_ElseIf(
                            cond: Expr_BinaryOp_BooleanAnd(
                                left: Expr_Instanceof(
                                    expr: Expr_Variable(
                                        name: node
                                    )
                                    class: Name(
                                        parts: array(
                                            0: Node
                                            1: Expr
                                            2: Assign
                                        )
                                    )
                                )
                                right: Expr_Instanceof(
                                    expr: Expr_PropertyFetch(
                                        var: Expr_Variable(
                                            name: node
                                        )
                                        name: Identifier(
                                            name: expr
                                        )
                                    )
                                    class: Name(
                                        parts: array(
                                            0: Node
                                            1: Expr
                                            2: New_
                                        )
                                    )
                                )
                            )
                            stmts: array(
                                0: Stmt_Echo(
                                    exprs: array(
                                        0: Expr_BinaryOp_Concat(
                                            left: Expr_BinaryOp_Concat(
                                                left: Scalar_String(
                                                    value: 
                                                found assingment with call to 'new' on line :
                                                )
                                                right: Expr_MethodCall(
                                                    var: Expr_Variable(
                                                        name: node
                                                    )
                                                    name: Identifier(
                                                        name: getLine
                                                    )
                                                    args: array(
                                                    )
                                                )
                                            )
                                            right: Scalar_String(
                                                value: 
                                            
                                            )
                                        )
                                    )
                                )
                                1: Stmt_Echo(
                                    exprs: array(
                                        0: Expr_BinaryOp_Concat(
                                            left: Expr_BinaryOp_Concat(
                                                left: Expr_BinaryOp_Concat(
                                                    left: Expr_PropertyFetch(
                                                        var: Expr_PropertyFetch(
                                                            var: Expr_Variable(
                                                                name: node
                                                            )
                                                            name: Identifier(
                                                                name: var
                                                            )
                                                        )
                                                        name: Identifier(
                                                            name: name
                                                        )
                                                    )
                                                    right: Scalar_String(
                                                        value:  is an instance of 
                                                    )
                                                )
                                                right: Expr_PropertyFetch(
                                                    var: Expr_PropertyFetch(
                                                        var: Expr_Variable(
                                                            name: node
                                                        )
                                                        name: Identifier(
                                                            name: expr
                                                        )
                                                    )
                                                    name: Identifier(
                                                        name: class
                                                    )
                                                )
                                            )
                                            right: Scalar_String(
                                                value: 
                                            
                                            
                                            )
                                        )
                                    )
                                )
                                2: Stmt_Expression(
                                    expr: Expr_Assign(
                                        var: Expr_ArrayDimFetch(
                                            var: Expr_Variable(
                                                name: INSTANCES
                                            )
                                            dim: Expr_PropertyFetch(
                                                var: Expr_PropertyFetch(
                                                    var: Expr_Variable(
                                                        name: node
                                                    )
                                                    name: Identifier(
                                                        name: var
                                                    )
                                                )
                                                name: Identifier(
                                                    name: name
                                                )
                                            )
                                        )
                                        expr: Expr_ArrayDimFetch(
                                            var: Expr_PropertyFetch(
                                                var: Expr_PropertyFetch(
                                                    var: Expr_PropertyFetch(
                                                        var: Expr_Variable(
                                                            name: node
                                                        )
                                                        name: Identifier(
                                                            name: expr
                                                        )
                                                    )
                                                    name: Identifier(
                                                        name: class
                                                    )
                                                )
                                                name: Identifier(
                                                    name: parts
                                                )
                                            )
                                            dim: Scalar_LNumber(
                                                value: 0
                                            )
                                        )
                                    )
                                )
                            )
                        )
                        2: Stmt_ElseIf(
                            cond: Expr_BinaryOp_BooleanAnd(
                                left: Expr_Instanceof(
                                    expr: Expr_Variable(
                                        name: node
                                    )
                                    class: Name(
                                        parts: array(
                                            0: Node
                                            1: Expr
                                            2: Assign
                                        )
                                    )
                                )
                                right: Expr_Instanceof(
                                    expr: Expr_PropertyFetch(
                                        var: Expr_Variable(
                                            name: node
                                        )
                                        name: Identifier(
                                            name: var
                                        )
                                    )
                                    class: Name(
                                        parts: array(
                                            0: Node
                                            1: Expr
                                            2: ArrayDimFetch
                                        )
                                    )
                                )
                            )
                            stmts: array(
                                0: Stmt_Echo(
                                    exprs: array(
                                        0: Expr_BinaryOp_Concat(
                                            left: Scalar_String(
                                                value: found an array FETCH on line
                                            )
                                            right: Expr_MethodCall(
                                                var: Expr_Variable(
                                                    name: node
                                                )
                                                name: Identifier(
                                                    name: getLine
                                                )
                                                args: array(
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        )
                        3: Stmt_ElseIf(
                            cond: Expr_Instanceof(
                                expr: Expr_Variable(
                                    name: node
                                )
                                class: Name(
                                    parts: array(
                                        0: Node
                                        1: Expr
                                        2: Assign
                                    )
                                )
                            )
                            stmts: array(
                                0: Stmt_Echo(
                                    exprs: array(
                                        0: Expr_BinaryOp_Concat(
                                            left: Expr_BinaryOp_Concat(
                                                left: Scalar_String(
                                                    value: found an assignment at line 
                                                )
                                                right: Expr_MethodCall(
                                                    var: Expr_Variable(
                                                        name: node
                                                    )
                                                    name: Identifier(
                                                        name: getLine
                                                    )
                                                    args: array(
                                                    )
                                                )
                                            )
                                            right: Scalar_String(
                                                value: 
                                            
                                            )
                                        )
                                    )
                                )
                                1: Stmt_Echo(
                                    exprs: array(
                                        0: Expr_BinaryOp_Concat(
                                            left: Expr_BinaryOp_Concat(
                                                left: Scalar_String(
                                                    value: var is: 
                                                )
                                                right: Expr_PropertyFetch(
                                                    var: Expr_PropertyFetch(
                                                        var: Expr_Variable(
                                                            name: node
                                                        )
                                                        name: Identifier(
                                                            name: var
                                                        )
                                                    )
                                                    name: Identifier(
                                                        name: name
                                                    )
                                                )
                                            )
                                            right: Scalar_String(
                                                value: 
                                            
                                            )
                                        )
                                    )
                                )
                                2: Stmt_Echo(
                                    exprs: array(
                                        0: Expr_BinaryOp_Concat(
                                            left: Expr_BinaryOp_Concat(
                                                left: Scalar_String(
                                                    value: calling is_tainted on: 
                                                )
                                                right: Expr_MethodCall(
                                                    var: Expr_PropertyFetch(
                                                        var: Expr_Variable(
                                                            name: node
                                                        )
                                                        name: Identifier(
                                                            name: expr
                                                        )
                                                    )
                                                    name: Identifier(
                                                        name: getType
                                                    )
                                                    args: array(
                                                    )
                                                )
                                            )
                                            right: Scalar_String(
                                                value: 
                                            
                                            )
                                        )
                                    )
                                )
                                3: Stmt_Expression(
                                    expr: Expr_Assign(
                                        var: Expr_Variable(
                                            name: vname
                                        )
                                        expr: Expr_PropertyFetch(
                                            var: Expr_PropertyFetch(
                                                var: Expr_Variable(
                                                    name: node
                                                )
                                                name: Identifier(
                                                    name: var
                                                )
                                            )
                                            name: Identifier(
                                                name: name
                                            )
                                        )
                                    )
                                )
                                4: Stmt_If(
                                    cond: Expr_FuncCall(
                                        name: Name(
                                            parts: array(
                                                0: is_tainted
                                            )
                                        )
                                        args: array(
                                            0: Arg(
                                                value: Expr_PropertyFetch(
                                                    var: Expr_Variable(
                                                        name: node
                                                    )
                                                    name: Identifier(
                                                        name: expr
                                                    )
                                                )
                                                byRef: false
                                                unpack: false
                                            )
                                        )
                                    )
                                    stmts: array(
                                        0: Stmt_If(
                                            cond: Expr_MethodCall(
                                                var: Expr_Variable(
                                                    name: CLEAR
                                                )
                                                name: Identifier(
                                                    name: contains
                                                )
                                                args: array(
                                                    0: Arg(
                                                        value: Expr_Variable(
                                                            name: vname
                                                        )
                                                        byRef: false
                                                        unpack: false
                                                    )
                                                )
                                            )
                                            stmts: array(
                                                0: Stmt_Expression(
                                                    expr: Expr_MethodCall(
                                                        var: Expr_Variable(
                                                            name: CLEAR
                                                        )
                                                        name: Identifier(
                                                            name: remove
                                                        )
                                                        args: array(
                                                            0: Arg(
                                                                value: Expr_Variable(
                                                                    name: vname
                                                                )
                                                                byRef: false
                                                                unpack: false
                                                            )
                                                        )
                                                    )
                                                )
                                                1: Stmt_Echo(
                                                    exprs: array(
                                                        0: Scalar_Encapsed(
                                                            parts: array(
                                                                0: Scalar_EncapsedStringPart(
                                                                    value: removed 
                                                                )
                                                                1: Expr_Variable(
                                                                    name: vname
                                                                )
                                                                2: Scalar_EncapsedStringPart(
                                                                    value:  from clear
                                                                
                                                                
                                                                )
                                                            )
                                                        )
                                                    )
                                                )
                                            )
                                            elseifs: array(
                                            )
                                            else: null
                                        )
                                        1: Stmt_If(
                                            cond: Expr_BooleanNot(
                                                expr: Expr_MethodCall(
                                                    var: Expr_Variable(
                                                        name: DIRTY
                                                    )
                                                    name: Identifier(
                                                        name: contains
                                                    )
                                                    args: array(
                                                        0: Arg(
                                                            value: Expr_Variable(
                                                                name: vname
                                                            )
                                                            byRef: false
                                                            unpack: false
                                                        )
                                                    )
                                                )
                                            )
                                            stmts: array(
                                                0: Stmt_Expression(
                                                    expr: Expr_MethodCall(
                                                        var: Expr_Variable(
                                                            name: DIRTY
                                                        )
                                                        name: Identifier(
                                                            name: add
                                                        )
                                                        args: array(
                                                            0: Arg(
                                                                value: Expr_Variable(
                                                                    name: vname
                                                                )
                                                                byRef: false
                                                                unpack: false
                                                            )
                                                        )
                                                    )
                                                )
                                                1: Stmt_Echo(
                                                    exprs: array(
                                                        0: Scalar_Encapsed(
                                                            parts: array(
                                                                0: Scalar_EncapsedStringPart(
                                                                    value: added 
                                                                )
                                                                1: Expr_Variable(
                                                                    name: vname
                                                                )
                                                                2: Scalar_EncapsedStringPart(
                                                                    value:  to dirty
                                                                
                                                                
                                                                )
                                                            )
                                                        )
                                                    )
                                                )
                                            )
                                            elseifs: array(
                                            )
                                            else: null
                                        )
                                    )
                                    elseifs: array(
                                    )
                                    else: Stmt_Else(
                                        stmts: array(
                                            0: Stmt_If(
                                                cond: Expr_MethodCall(
                                                    var: Expr_Variable(
                                                        name: DIRTY
                                                    )
                                                    name: Identifier(
                                                        name: contains
                                                    )
                                                    args: array(
                                                        0: Arg(
                                                            value: Expr_Variable(
                                                                name: vname
                                                            )
                                                            byRef: false
                                                            unpack: false
                                                        )
                                                    )
                                                )
                                                stmts: array(
                                                    0: Stmt_Expression(
                                                        expr: Expr_MethodCall(
                                                            var: Expr_Variable(
                                                                name: DIRTY
                                                            )
                                                            name: Identifier(
                                                                name: remove
                                                            )
                                                            args: array(
                                                                0: Arg(
                                                                    value: Expr_Variable(
                                                                        name: vname
                                                                    )
                                                                    byRef: false
                                                                    unpack: false
                                                                )
                                                            )
                                                        )
                                                    )
                                                    1: Stmt_Echo(
                                                        exprs: array(
                                                            0: Scalar_Encapsed(
                                                                parts: array(
                                                                    0: Scalar_EncapsedStringPart(
                                                                        value: removed 
                                                                    )
                                                                    1: Expr_Variable(
                                                                        name: vname
                                                                    )
                                                                    2: Scalar_EncapsedStringPart(
                                                                        value:  from dirty
                                                                    
                                                                    
                                                                    )
                                                                )
                                                            )
                                                        )
                                                    )
                                                )
                                                elseifs: array(
                                                )
                                                else: null
                                            )
                                            1: Stmt_If(
                                                cond: Expr_BooleanNot(
                                                    expr: Expr_MethodCall(
                                                        var: Expr_Variable(
                                                            name: CLEAR
                                                        )
                                                        name: Identifier(
                                                            name: contains
                                                        )
                                                        args: array(
                                                            0: Arg(
                                                                value: Expr_Variable(
                                                                    name: vname
                                                                )
                                                                byRef: false
                                                                unpack: false
                                                            )
                                                        )
                                                    )
                                                )
                                                stmts: array(
                                                    0: Stmt_Expression(
                                                        expr: Expr_MethodCall(
                                                            var: Expr_Variable(
                                                                name: CLEAR
                                                            )
                                                            name: Identifier(
                                                                name: add
                                                            )
                                                            args: array(
                                                                0: Arg(
                                                                    value: Expr_Variable(
                                                                        name: vname
                                                                    )
                                                                    byRef: false
                                                                    unpack: false
                                                                )
                                                            )
                                                        )
                                                    )
                                                    1: Stmt_Echo(
                                                        exprs: array(
                                                            0: Scalar_Encapsed(
                                                                parts: array(
                                                                    0: Scalar_EncapsedStringPart(
                                                                        value: added 
                                                                    )
                                                                    1: Expr_Variable(
                                                                        name: vname
                                                                    )
                                                                    2: Scalar_EncapsedStringPart(
                                                                        value:  to clear
                                                                    
                                                                    
                                                                    )
                                                                )
                                                            )
                                                        )
                                                    )
                                                )
                                                elseifs: array(
                                                )
                                                else: null
                                            )
                                            2: Stmt_Return(
                                                expr: Expr_ClassConstFetch(
                                                    class: Name(
                                                        parts: array(
                                                            0: NodeTraverser
                                                        )
                                                    )
                                                    name: Identifier(
                                                        name: DONT_TRAVERSE_CHILDREN
                                                    )
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        )
                        4: Stmt_ElseIf(
                            cond: Expr_BinaryOp_BooleanAnd(
                                left: Expr_Instanceof(
                                    expr: Expr_Variable(
                                        name: node
                                    )
                                    class: Name(
                                        parts: array(
                                            0: Node
                                            1: Expr
                                            2: FuncCall
                                        )
                                    )
                                )
                                right: Expr_FuncCall(
                                    name: Name(
                                        parts: array(
                                            0: in_array
                                        )
                                    )
                                    args: array(
                                        0: Arg(
                                            value: Expr_PropertyFetch(
                                                var: Expr_Variable(
                                                    name: node
                                                )
                                                name: Identifier(
                                                    name: name
                                                )
                                            )
                                            byRef: false
                                            unpack: false
                                        )
                                        1: Arg(
                                            value: Expr_Variable(
                                                name: sinks
                                            )
                                            byRef: false
                                            unpack: false
                                        )
                                    )
                                )
                            )
                            stmts: array(
                                0: Stmt_Echo(
                                    exprs: array(
                                        0: Expr_BinaryOp_Concat(
                                            left: Expr_BinaryOp_Concat(
                                                left: Expr_BinaryOp_Concat(
                                                    left: Expr_BinaryOp_Concat(
                                                        left: Scalar_String(
                                                            value: SINK FUNCTION CALL:
                                                        
                                                        )
                                                        right: Scalar_Encapsed(
                                                            parts: array(
                                                                0: Scalar_EncapsedStringPart(
                                                                    value: NAME: 
                                                                )
                                                                1: Expr_PropertyFetch(
                                                                    var: Expr_Variable(
                                                                        name: node
                                                                    )
                                                                    name: Identifier(
                                                                        name: name
                                                                    )
                                                                )
                                                                2: Scalar_EncapsedStringPart(
                                                                    value:  
                                                                
                                                                )
                                                            )
                                                        )
                                                    )
                                                    right: Scalar_String(
                                                        value: LINE: 
                                                    )
                                                )
                                                right: Expr_MethodCall(
                                                    var: Expr_Variable(
                                                        name: node
                                                    )
                                                    name: Identifier(
                                                        name: getLine
                                                    )
                                                    args: array(
                                                    )
                                                )
                                            )
                                            right: Scalar_String(
                                                value: 
                                            
                                            )
                                        )
                                    )
                                )
                                1: Stmt_Expression(
                                    expr: Expr_Assign(
                                        var: Expr_Variable(
                                            name: i
                                        )
                                        expr: Scalar_LNumber(
                                            value: 0
                                        )
                                    )
                                )
                                2: Stmt_Expression(
                                    expr: Expr_Assign(
                                        var: Expr_Variable(
                                            name: i_t
                                        )
                                        expr: Scalar_LNumber(
                                            value: 0
                                        )
                                    )
                                )
                                3: Stmt_Foreach(
                                    expr: Expr_PropertyFetch(
                                        var: Expr_Variable(
                                            name: node
                                        )
                                        name: Identifier(
                                            name: args
                                        )
                                    )
                                    keyVar: null
                                    byRef: false
                                    valueVar: Expr_Variable(
                                        name: ar
                                    )
                                    stmts: array(
                                        0: Stmt_Expression(
                                            expr: Expr_Assign(
                                                var: Expr_Variable(
                                                    name: t
                                                )
                                                expr: Expr_FuncCall(
                                                    name: Name(
                                                        parts: array(
                                                            0: is_tainted
                                                        )
                                                    )
                                                    args: array(
                                                        0: Arg(
                                                            value: Expr_Variable(
                                                                name: ar
                                                            )
                                                            byRef: false
                                                            unpack: false
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                        1: Stmt_Expression(
                                            expr: Expr_Assign(
                                                var: Expr_Variable(
                                                    name: x
                                                )
                                                expr: Expr_Ternary(
                                                    cond: Expr_Variable(
                                                        name: t
                                                    )
                                                    if: Scalar_String(
                                                        value: tainted
                                                    )
                                                    else: Scalar_String(
                                                        value: safe
                                                    )
                                                )
                                            )
                                        )
                                        2: Stmt_Echo(
                                            exprs: array(
                                                0: Expr_BinaryOp_Concat(
                                                    left: Expr_BinaryOp_Concat(
                                                        left: Scalar_Encapsed(
                                                            parts: array(
                                                                0: Scalar_EncapsedStringPart(
                                                                    value: arg #
                                                                )
                                                                1: Expr_Variable(
                                                                    name: i
                                                                )
                                                                2: Scalar_EncapsedStringPart(
                                                                    value:  : 
                                                                )
                                                            )
                                                        )
                                                        right: Expr_Variable(
                                                            name: x
                                                        )
                                                    )
                                                    right: Scalar_String(
                                                        value: 
                                                    
                                                    )
                                                )
                                            )
                                        )
                                        3: Stmt_If(
                                            cond: Expr_Variable(
                                                name: t
                                            )
                                            stmts: array(
                                                0: Stmt_Expression(
                                                    expr: Expr_PostInc(
                                                        var: Expr_Variable(
                                                            name: i_t
                                                        )
                                                    )
                                                )
                                            )
                                            elseifs: array(
                                            )
                                            else: null
                                        )
                                        4: Stmt_Expression(
                                            expr: Expr_PostInc(
                                                var: Expr_Variable(
                                                    name: i
                                                )
                                            )
                                        )
                                    )
                                )
                                4: Stmt_Echo(
                                    exprs: array(
                                        0: Scalar_Encapsed(
                                            parts: array(
                                                0: Expr_Variable(
                                                    name: i_t
                                                )
                                                1: Scalar_EncapsedStringPart(
                                                    value:  of total 
                                                )
                                                2: Expr_Variable(
                                                    name: i
                                                )
                                                3: Scalar_EncapsedStringPart(
                                                    value:  arguments are tainted.
                                                
                                                )
                                            )
                                        )
                                    )
                                )
                                5: Stmt_If(
                                    cond: Expr_Variable(
                                        name: i_t
                                    )
                                    stmts: array(
                                        0: Stmt_Echo(
                                            exprs: array(
                                                0: Scalar_String(
                                                    value: ------------------------------------------
                                                
                                                )
                                            )
                                        )
                                        1: Stmt_Echo(
                                            exprs: array(
                                                0: Expr_BinaryOp_Concat(
                                                    left: Expr_BinaryOp_Concat(
                                                        left: Expr_BinaryOp_Concat(
                                                            left: Expr_BinaryOp_Concat(
                                                                left: Scalar_String(
                                                                    value: ALERT: tainted input given to sink function(
                                                                )
                                                                right: Expr_PropertyFetch(
                                                                    var: Expr_Variable(
                                                                        name: node
                                                                    )
                                                                    name: Identifier(
                                                                        name: name
                                                                    )
                                                                )
                                                            )
                                                            right: Scalar_String(
                                                                value: ) on line 
                                                            )
                                                        )
                                                        right: Expr_MethodCall(
                                                            var: Expr_Variable(
                                                                name: node
                                                            )
                                                            name: Identifier(
                                                                name: getLine
                                                            )
                                                            args: array(
                                                            )
                                                        )
                                                    )
                                                    right: Scalar_String(
                                                        value: !
                                                    
                                                    )
                                                )
                                            )
                                        )
                                        2: Stmt_Echo(
                                            exprs: array(
                                                0: Scalar_String(
                                                    value: ------------------------------------------
                                                
                                                )
                                            )
                                        )
                                    )
                                    elseifs: array(
                                    )
                                    else: null
                                )
                            )
                        )
                    )
                    else: null
                )
                5: Stmt_Nop(
                )
            )
        )
    )
)

tree for Screamer looks like this:
Stmt_Class(
    flags: 0
    name: Identifier(
        name: Screamer
    )
    extends: Name(
        parts: array(
            0: NodeVisitorAbstract
        )
    )
    implements: array(
    )
    stmts: array(
        0: Stmt_ClassMethod(
            flags: MODIFIER_PUBLIC (1)
            byRef: false
            name: Identifier(
                name: enterNode
            )
            params: array(
                0: Param(
                    type: Name(
                        parts: array(
                            0: Node
                        )
                    )
                    byRef: false
                    variadic: false
                    var: Expr_Variable(
                        name: node
                    )
                    default: null
                )
            )
            returnType: null
            stmts: array(
                0: Stmt_Expression(
                    expr: Expr_Include(
                        expr: Scalar_String(
                            value: /home/chao/sql-injection-scanner/SSS.php
                        )
                        type: TYPE_INCLUDE (1)
                    )
                )
                1: Stmt_Global(
                    vars: array(
                        0: Expr_Variable(
                            name: DIRTY
                        )
                    )
                )
                2: Stmt_Global(
                    vars: array(
                        0: Expr_Variable(
                            name: CLEAR
                        )
                    )
                )
                3: Stmt_If(
                    cond: Expr_BinaryOp_BooleanAnd(
                        left: Expr_Instanceof(
                            expr: Expr_Variable(
                                name: node
                            )
                            class: Name(
                                parts: array(
                                    0: Node
                                    1: Expr
                                    2: Variable
                                )
                            )
                        )
                        right: Expr_FuncCall(
                            name: Name(
                                parts: array(
                                    0: in_array
                                )
                            )
                            args: array(
                                0: Arg(
                                    value: Expr_BinaryOp_Concat(
                                        left: Scalar_String(
                                            value: $
                                        )
                                        right: Expr_PropertyFetch(
                                            var: Expr_Variable(
                                                name: node
                                            )
                                            name: Identifier(
                                                name: name
                                            )
                                        )
                                    )
                                    byRef: false
                                    unpack: false
                                )
                                1: Arg(
                                    value: Expr_Variable(
                                        name: sources
                                    )
                                    byRef: false
                                    unpack: false
                                )
                            )
                        )
                    )
                    stmts: array(
                        0: Stmt_Echo(
                            exprs: array(
                                0: Expr_BinaryOp_Concat(
                                    left: Expr_BinaryOp_Concat(
                                        left: Expr_BinaryOp_Concat(
                                            left: Expr_BinaryOp_Concat(
                                                left: Scalar_String(
                                                    value: found source: 
                                                )
                                                right: Expr_PropertyFetch(
                                                    var: Expr_Variable(
                                                        name: node
                                                    )
                                                    name: Identifier(
                                                        name: name
                                                    )
                                                )
                                            )
                                            right: Scalar_String(
                                                value:  at line 
                                            )
                                        )
                                        right: Expr_MethodCall(
                                            var: Expr_Variable(
                                                name: node
                                            )
                                            name: Identifier(
                                                name: getLine
                                            )
                                            args: array(
                                            )
                                        )
                                    )
                                    right: Scalar_String(
                                        value: , potential vulnerability
                                    
                                    )
                                )
                            )
                        )
                        1: Stmt_If(
                            cond: Expr_BooleanNot(
                                expr: Expr_FuncCall(
                                    name: Name(
                                        parts: array(
                                            0: climb_up
                                        )
                                    )
                                    args: array(
                                        0: Arg(
                                            value: Expr_Variable(
                                                name: node
                                            )
                                            byRef: false
                                            unpack: false
                                        )
                                    )
                                )
                            )
                            stmts: array(
                                0: Stmt_Echo(
                                    exprs: array(
                                        0: Expr_BinaryOp_Concat(
                                            left: Expr_BinaryOp_Concat(
                                                left: Expr_BinaryOp_Concat(
                                                    left: Expr_BinaryOp_Concat(
                                                        left: Scalar_String(
                                                            value: Input from 
                                                        )
                                                        right: Expr_PropertyFetch(
                                                            var: Expr_Variable(
                                                                name: node
                                                            )
                                                            name: Identifier(
                                                                name: name
                                                            )
                                                        )
                                                    )
                                                    right: Scalar_String(
                                                        value:  without sanitization at line 
                                                    )
                                                )
                                                right: Expr_MethodCall(
                                                    var: Expr_Variable(
                                                        name: node
                                                    )
                                                    name: Identifier(
                                                        name: getLine
                                                    )
                                                    args: array(
                                                    )
                                                )
                                            )
                                            right: Scalar_String(
                                                value: 
                                            
                                            )
                                        )
                                    )
                                )
                            )
                            elseifs: array(
                            )
                            else: null
                        )
                    )
                    elseifs: array(
                        0: Stmt_ElseIf(
                            cond: Expr_BinaryOp_BooleanAnd(
                                left: Expr_Instanceof(
                                    expr: Expr_Variable(
                                        name: node
                                    )
                                    class: Name(
                                        parts: array(
                                            0: Node
                                            1: Expr
                                            2: Variable
                                        )
                                    )
                                )
                                right: Expr_MethodCall(
                                    var: Expr_Variable(
                                        name: DIRTY
                                    )
                                    name: Identifier(
                                        name: contains
                                    )
                                    args: array(
                                        0: Arg(
                                            value: Expr_PropertyFetch(
                                                var: Expr_Variable(
                                                    name: node
                                                )
                                                name: Identifier(
                                                    name: name
                                                )
                                            )
                                            byRef: false
                                            unpack: false
                                        )
                                    )
                                )
                            )
                            stmts: array(
                                0: Stmt_Echo(
                                    exprs: array(
                                        0: Expr_BinaryOp_Concat(
                                            left: Expr_BinaryOp_Concat(
                                                left: Scalar_String(
                                                    value: found a tainted variable on line 
                                                )
                                                right: Expr_MethodCall(
                                                    var: Expr_Variable(
                                                        name: node
                                                    )
                                                    name: Identifier(
                                                        name: getLine
                                                    )
                                                    args: array(
                                                    )
                                                )
                                            )
                                            right: Scalar_String(
                                                value: 
                                            
                                            )
                                        )
                                    )
                                )
                                1: Stmt_If(
                                    cond: Expr_BooleanNot(
                                        expr: Expr_FuncCall(
                                            name: Name(
                                                parts: array(
                                                    0: climb_up
                                                )
                                            )
                                            args: array(
                                                0: Arg(
                                                    value: Expr_Variable(
                                                        name: node
                                                    )
                                                    byRef: false
                                                    unpack: false
                                                )
                                            )
                                        )
                                    )
                                    stmts: array(
                                        0: Stmt_Echo(
                                            exprs: array(
                                                0: Scalar_String(
                                                    value: VLN: tainted variable persists and infects
                                                
                                                )
                                            )
                                        )
                                    )
                                    elseifs: array(
                                    )
                                    else: null
                                )
                            )
                        )
                    )
                    else: null
                )
            )
        )
    )
)

tree for Librarian looks like this:
Stmt_Class(
    flags: 0
    name: Identifier(
        name: Librarian
    )
    extends: Name(
        parts: array(
            0: NodeVisitorAbstract
        )
    )
    implements: array(
    )
    stmts: array(
        0: Stmt_ClassMethod(
            flags: MODIFIER_PUBLIC (1)
            byRef: false
            name: Identifier(
                name: enterNode
            )
            params: array(
                0: Param(
                    type: Name(
                        parts: array(
                            0: Node
                        )
                    )
                    byRef: false
                    variadic: false
                    var: Expr_Variable(
                        name: node
                    )
                    default: null
                )
            )
            returnType: null
            stmts: array(
                0: Stmt_Global(
                    vars: array(
                        0: Expr_Variable(
                            name: CLASSES
                        )
                    )
                )
                1: Stmt_Global(
                    vars: array(
                        0: Expr_Variable(
                            name: FUNCTIONS
                        )
                    )
                )
                2: Stmt_Global(
                    vars: array(
                        0: Expr_Variable(
                            name: METHODS
                        )
                    )
                )
                3: Stmt_If(
                    cond: Expr_Instanceof(
                        expr: Expr_Variable(
                            name: node
                        )
                        class: Name(
                            parts: array(
                                0: Node
                                1: Stmt
                                2: Class_
                            )
                        )
                    )
                    stmts: array(
                        0: Stmt_Echo(
                            exprs: array(
                                0: Scalar_String(
                                    value: 
                                ################################################################################
                                
                                )
                            )
                        )
                        1: Stmt_Echo(
                            exprs: array(
                                0: Expr_BinaryOp_Concat(
                                    left: Expr_BinaryOp_Concat(
                                        left: Expr_BinaryOp_Concat(
                                            left: Expr_BinaryOp_Concat(
                                                left: Scalar_String(
                                                    value: found a class declaration on line 
                                                )
                                                right: Expr_MethodCall(
                                                    var: Expr_Variable(
                                                        name: node
                                                    )
                                                    name: Identifier(
                                                        name: getLine
                                                    )
                                                    args: array(
                                                    )
                                                )
                                            )
                                            right: Scalar_String(
                                                value:  with name 
                                            )
                                        )
                                        right: Expr_PropertyFetch(
                                            var: Expr_Variable(
                                                name: node
                                            )
                                            name: Identifier(
                                                name: name
                                            )
                                        )
                                    )
                                    right: Scalar_String(
                                        value: 
                                    
                                    )
                                )
                            )
                        )
                        2: Stmt_Echo(
                            exprs: array(
                                0: Scalar_String(
                                    value: ################################################################################
                                
                                
                                )
                            )
                        )
                        3: Stmt_Expression(
                            expr: Expr_Assign(
                                var: Expr_ArrayDimFetch(
                                    var: Expr_Variable(
                                        name: CLASSES
                                    )
                                    dim: Expr_PropertyFetch(
                                        var: Expr_PropertyFetch(
                                            var: Expr_Variable(
                                                name: node
                                            )
                                            name: Identifier(
                                                name: name
                                            )
                                        )
                                        name: Identifier(
                                            name: name
                                        )
                                    )
                                )
                                expr: Expr_Variable(
                                    name: node
                                )
                            )
                        )
                    )
                    elseifs: array(
                        0: Stmt_ElseIf(
                            cond: Expr_Instanceof(
                                expr: Expr_Variable(
                                    name: node
                                )
                                class: Name(
                                    parts: array(
                                        0: Node
                                        1: Stmt
                                        2: Function_
                                    )
                                )
                            )
                            stmts: array(
                                0: Stmt_Echo(
                                    exprs: array(
                                        0: Scalar_String(
                                            value: 
                                        ################################################################################
                                        
                                        )
                                    )
                                )
                                1: Stmt_Echo(
                                    exprs: array(
                                        0: Expr_BinaryOp_Concat(
                                            left: Expr_BinaryOp_Concat(
                                                left: Expr_BinaryOp_Concat(
                                                    left: Expr_BinaryOp_Concat(
                                                        left: Scalar_String(
                                                            value: found a function declaration on line 
                                                        )
                                                        right: Expr_MethodCall(
                                                            var: Expr_Variable(
                                                                name: node
                                                            )
                                                            name: Identifier(
                                                                name: getLine
                                                            )
                                                            args: array(
                                                            )
                                                        )
                                                    )
                                                    right: Scalar_String(
                                                        value:  with name 
                                                    )
                                                )
                                                right: Expr_PropertyFetch(
                                                    var: Expr_Variable(
                                                        name: node
                                                    )
                                                    name: Identifier(
                                                        name: name
                                                    )
                                                )
                                            )
                                            right: Scalar_String(
                                                value: 
                                            
                                            )
                                        )
                                    )
                                )
                                2: Stmt_Echo(
                                    exprs: array(
                                        0: Scalar_String(
                                            value: ################################################################################
                                        
                                        
                                        )
                                    )
                                )
                                3: Stmt_Expression(
                                    expr: Expr_Assign(
                                        var: Expr_ArrayDimFetch(
                                            var: Expr_Variable(
                                                name: FUNCTIONS
                                            )
                                            dim: Expr_PropertyFetch(
                                                var: Expr_PropertyFetch(
                                                    var: Expr_Variable(
                                                        name: node
                                                    )
                                                    name: Identifier(
                                                        name: name
                                                    )
                                                )
                                                name: Identifier(
                                                    name: name
                                                )
                                            )
                                        )
                                        expr: Expr_Variable(
                                            name: node
                                        )
                                    )
                                )
                            )
                        )
                        1: Stmt_ElseIf(
                            cond: Expr_Instanceof(
                                expr: Expr_Variable(
                                    name: node
                                )
                                class: Name(
                                    parts: array(
                                        0: Node
                                        1: Stmt
                                        2: ClassMethod
                                    )
                                )
                            )
                            stmts: array(
                                0: Stmt_Echo(
                                    exprs: array(
                                        0: Scalar_String(
                                            value: 
                                        ################################################################################
                                        
                                        )
                                    )
                                )
                                1: Stmt_Echo(
                                    exprs: array(
                                        0: Expr_BinaryOp_Concat(
                                            left: Expr_BinaryOp_Concat(
                                                left: Expr_BinaryOp_Concat(
                                                    left: Expr_BinaryOp_Concat(
                                                        left: Scalar_String(
                                                            value: found a class method declaration on line 
                                                        )
                                                        right: Expr_MethodCall(
                                                            var: Expr_Variable(
                                                                name: node
                                                            )
                                                            name: Identifier(
                                                                name: getLine
                                                            )
                                                            args: array(
                                                            )
                                                        )
                                                    )
                                                    right: Scalar_String(
                                                        value:  with name 
                                                    )
                                                )
                                                right: Expr_PropertyFetch(
                                                    var: Expr_Variable(
                                                        name: node
                                                    )
                                                    name: Identifier(
                                                        name: name
                                                    )
                                                )
                                            )
                                            right: Scalar_String(
                                                value: 
                                            
                                            )
                                        )
                                    )
                                )
                                2: Stmt_Echo(
                                    exprs: array(
                                        0: Scalar_String(
                                            value: ################################################################################
                                        
                                        
                                        )
                                    )
                                )
                                3: Stmt_Expression(
                                    expr: Expr_Assign(
                                        var: Expr_ArrayDimFetch(
                                            var: Expr_Variable(
                                                name: METHODS
                                            )
                                            dim: Expr_PropertyFetch(
                                                var: Expr_PropertyFetch(
                                                    var: Expr_Variable(
                                                        name: node
                                                    )
                                                    name: Identifier(
                                                        name: name
                                                    )
                                                )
                                                name: Identifier(
                                                    name: name
                                                )
                                            )
                                        )
                                        expr: Expr_Variable(
                                            name: node
                                        )
                                    )
                                )
                            )
                        )
                    )
                    else: null
                )
            )
        )
    )
)

tree for ParentConnector looks like this:
Stmt_Class(
    flags: 0
    name: Identifier(
        name: ParentConnector
    )
    extends: Name(
        parts: array(
            0: NodeVisitorAbstract
        )
    )
    implements: array(
    )
    stmts: array(
        0: Stmt_Property(
            flags: MODIFIER_PRIVATE (4)
            type: null
            props: array(
                0: Stmt_PropertyProperty(
                    name: VarLikeIdentifier(
                        name: stack
                    )
                    default: null
                )
            )
        )
        1: Stmt_ClassMethod(
            flags: MODIFIER_PUBLIC (1)
            byRef: false
            name: Identifier(
                name: beforeTraverse
            )
            params: array(
                0: Param(
                    type: Identifier(
                        name: array
                    )
                    byRef: false
                    variadic: false
                    var: Expr_Variable(
                        name: nodes
                    )
                    default: null
                )
            )
            returnType: null
            stmts: array(
                0: Stmt_Expression(
                    expr: Expr_Assign(
                        var: Expr_PropertyFetch(
                            var: Expr_Variable(
                                name: this
                            )
                            name: Identifier(
                                name: stack
                            )
                        )
                        expr: Expr_Array(
                            items: array(
                            )
                        )
                    )
                )
            )
        )
        2: Stmt_ClassMethod(
            flags: MODIFIER_PUBLIC (1)
            byRef: false
            name: Identifier(
                name: enterNode
            )
            params: array(
                0: Param(
                    type: Name(
                        parts: array(
                            0: Node
                        )
                    )
                    byRef: false
                    variadic: false
                    var: Expr_Variable(
                        name: node
                    )
                    default: null
                )
            )
            returnType: null
            stmts: array(
                0: Stmt_If(
                    cond: Expr_BooleanNot(
                        expr: Expr_Empty(
                            expr: Expr_PropertyFetch(
                                var: Expr_Variable(
                                    name: this
                                )
                                name: Identifier(
                                    name: stack
                                )
                            )
                        )
                    )
                    stmts: array(
                        0: Stmt_Expression(
                            expr: Expr_MethodCall(
                                var: Expr_Variable(
                                    name: node
                                )
                                name: Identifier(
                                    name: setAttribute
                                )
                                args: array(
                                    0: Arg(
                                        value: Scalar_String(
                                            value: parent
                                        )
                                        byRef: false
                                        unpack: false
                                    )
                                    1: Arg(
                                        value: Expr_ArrayDimFetch(
                                            var: Expr_PropertyFetch(
                                                var: Expr_Variable(
                                                    name: this
                                                )
                                                name: Identifier(
                                                    name: stack
                                                )
                                            )
                                            dim: Expr_BinaryOp_Minus(
                                                left: Expr_FuncCall(
                                                    name: Name(
                                                        parts: array(
                                                            0: count
                                                        )
                                                    )
                                                    args: array(
                                                        0: Arg(
                                                            value: Expr_PropertyFetch(
                                                                var: Expr_Variable(
                                                                    name: this
                                                                )
                                                                name: Identifier(
                                                                    name: stack
                                                                )
                                                            )
                                                            byRef: false
                                                            unpack: false
                                                        )
                                                    )
                                                )
                                                right: Scalar_LNumber(
                                                    value: 1
                                                )
                                            )
                                        )
                                        byRef: false
                                        unpack: false
                                    )
                                )
                            )
                        )
                    )
                    elseifs: array(
                    )
                    else: null
                )
                1: Stmt_Expression(
                    expr: Expr_Assign(
                        var: Expr_ArrayDimFetch(
                            var: Expr_PropertyFetch(
                                var: Expr_Variable(
                                    name: this
                                )
                                name: Identifier(
                                    name: stack
                                )
                            )
                            dim: null
                        )
                        expr: Expr_Variable(
                            name: node
                        )
                    )
                )
            )
        )
        3: Stmt_ClassMethod(
            flags: MODIFIER_PUBLIC (1)
            byRef: false
            name: Identifier(
                name: leaveNode
            )
            params: array(
                0: Param(
                    type: Name(
                        parts: array(
                            0: Node
                        )
                    )
                    byRef: false
                    variadic: false
                    var: Expr_Variable(
                        name: node
                    )
                    default: null
                )
            )
            returnType: null
            stmts: array(
                0: Stmt_Expression(
                    expr: Expr_FuncCall(
                        name: Name(
                            parts: array(
                                0: array_pop
                            )
                        )
                        args: array(
                            0: Arg(
                                value: Expr_PropertyFetch(
                                    var: Expr_Variable(
                                        name: this
                                    )
                                    name: Identifier(
                                        name: stack
                                    )
                                )
                                byRef: false
                                unpack: false
                            )
                        )
                    )
                )
            )
        )
    )
)
instances: Array
(
    [CLEAR] => Ds
    [DIRTY] => Ds
    [traverser] => NodeTraverser
    [classfinder] => NodeTraverser
    [pretraverser] => NodeTraverser
    [rii] => RecursiveIteratorIterator
    [dumper] => NodeDumper
)
reading: ./out

tree for enterNode looks like this:
Stmt_ClassMethod(
    flags: MODIFIER_PUBLIC (1)
    byRef: false
    name: Identifier(
        name: enterNode
    )
    params: array(
        0: Param(
            type: Name(
                parts: array(
                    0: Node
                )
            )
            byRef: false
            variadic: false
            var: Expr_Variable(
                name: node
            )
            default: null
        )
    )
    returnType: null
    stmts: array(
        0: Stmt_If(
            cond: Expr_BooleanNot(
                expr: Expr_Empty(
                    expr: Expr_PropertyFetch(
                        var: Expr_Variable(
                            name: this
                        )
                        name: Identifier(
                            name: stack
                        )
                    )
                )
            )
            stmts: array(
                0: Stmt_Expression(
                    expr: Expr_MethodCall(
                        var: Expr_Variable(
                            name: node
                        )
                        name: Identifier(
                            name: setAttribute
                        )
                        args: array(
                            0: Arg(
                                value: Scalar_String(
                                    value: parent
                                )
                                byRef: false
                                unpack: false
                            )
                            1: Arg(
                                value: Expr_ArrayDimFetch(
                                    var: Expr_PropertyFetch(
                                        var: Expr_Variable(
                                            name: this
                                        )
                                        name: Identifier(
                                            name: stack
                                        )
                                    )
                                    dim: Expr_BinaryOp_Minus(
                                        left: Expr_FuncCall(
                                            name: Name(
                                                parts: array(
                                                    0: count
                                                )
                                            )
                                            args: array(
                                                0: Arg(
                                                    value: Expr_PropertyFetch(
                                                        var: Expr_Variable(
                                                            name: this
                                                        )
                                                        name: Identifier(
                                                            name: stack
                                                        )
                                                    )
                                                    byRef: false
                                                    unpack: false
                                                )
                                            )
                                        )
                                        right: Scalar_LNumber(
                                            value: 1
                                        )
                                    )
                                )
                                byRef: false
                                unpack: false
                            )
                        )
                    )
                )
            )
            elseifs: array(
            )
            else: null
        )
        1: Stmt_Expression(
            expr: Expr_Assign(
                var: Expr_ArrayDimFetch(
                    var: Expr_PropertyFetch(
                        var: Expr_Variable(
                            name: this
                        )
                        name: Identifier(
                            name: stack
                        )
                    )
                    dim: null
                )
                expr: Expr_Variable(
                    name: node
                )
            )
        )
    )
)

tree for beforeTraverse looks like this:
Stmt_ClassMethod(
    flags: MODIFIER_PUBLIC (1)
    byRef: false
    name: Identifier(
        name: beforeTraverse
    )
    params: array(
        0: Param(
            type: Identifier(
                name: array
            )
            byRef: false
            variadic: false
            var: Expr_Variable(
                name: nodes
            )
            default: null
        )
    )
    returnType: null
    stmts: array(
        0: Stmt_Expression(
            expr: Expr_Assign(
                var: Expr_PropertyFetch(
                    var: Expr_Variable(
                        name: this
                    )
                    name: Identifier(
                        name: stack
                    )
                )
                expr: Expr_Array(
                    items: array(
                    )
                )
            )
        )
    )
)

tree for leaveNode looks like this:
Stmt_ClassMethod(
    flags: MODIFIER_PUBLIC (1)
    byRef: false
    name: Identifier(
        name: leaveNode
    )
    params: array(
        0: Param(
            type: Name(
                parts: array(
                    0: Node
                )
            )
            byRef: false
            variadic: false
            var: Expr_Variable(
                name: node
            )
            default: null
        )
    )
    returnType: null
    stmts: array(
        0: Stmt_Expression(
            expr: Expr_FuncCall(
                name: Name(
                    parts: array(
                        0: array_pop
                    )
                )
                args: array(
                    0: Arg(
                        value: Expr_PropertyFetch(
                            var: Expr_Variable(
                                name: this
                            )
                            name: Identifier(
                                name: stack
                            )
                        )
                        byRef: false
                        unpack: false
                    )
                )
            )
        )
    )
)

tree for funcScan looks like this:
Stmt_Function(
    byRef: false
    name: Identifier(
        name: funcScan
    )
    params: array(
        0: Param(
            type: Identifier(
                name: string
            )
            byRef: false
            variadic: false
            var: Expr_Variable(
                name: name
            )
            default: null
        )
        1: Param(
            type: Identifier(
                name: array
            )
            byRef: false
            variadic: false
            var: Expr_Variable(
                name: aliases
            )
            default: null
        )
    )
    returnType: null
    stmts: array(
    )
)

tree for is_tainted looks like this:
Stmt_Function(
    byRef: false
    name: Identifier(
        name: is_tainted
    )
    params: array(
        0: Param(
            type: Name(
                parts: array(
                    0: Node
                )
            )
            byRef: false
            variadic: false
            var: Expr_Variable(
                name: node
            )
            default: null
        )
    )
    returnType: null
    stmts: array(
        0: Stmt_Global(
            vars: array(
                0: Expr_Variable(
                    name: root
                )
            )
        )
        1: Stmt_Global(
            vars: array(
                0: Expr_Variable(
                    name: tainted
                )
            )
        )
        2: Stmt_Expression(
            expr: Expr_Assign(
                var: Expr_Variable(
                    name: root
                )
                expr: Expr_MethodCall(
                    var: Expr_Variable(
                        name: node
                    )
                    name: Identifier(
                        name: getAttribute
                    )
                    args: array(
                        0: Arg(
                            value: Scalar_String(
                                value: parent
                            )
                            byRef: false
                            unpack: false
                        )
                    )
                )
            )
        )
        3: Stmt_Expression(
            expr: Expr_Assign(
                var: Expr_Variable(
                    name: tainted
                )
                expr: Expr_ConstFetch(
                    name: Name(
                        parts: array(
                            0: false
                        )
                    )
                )
            )
        )
        4: Stmt_Expression(
            expr: Expr_Assign(
                var: Expr_Variable(
                    name: traverser
                )
                expr: Expr_New(
                    class: Name(
                        parts: array(
                            0: NodeTraverser
                        )
                    )
                    args: array(
                    )
                )
            )
        )
        5: Stmt_Expression(
            expr: Expr_MethodCall(
                var: Expr_Variable(
                    name: traverser
                )
                name: Identifier(
                    name: addVisitor
                )
                args: array(
                    0: Arg(
                        value: Expr_New(
                            class: Name(
                                parts: array(
                                    0: Screamer
                                )
                            )
                            args: array(
                            )
                        )
                        byRef: false
                        unpack: false
                    )
                )
            )
        )
        6: Stmt_Expression(
            expr: Expr_MethodCall(
                var: Expr_Variable(
                    name: traverser
                )
                name: Identifier(
                    name: traverse
                )
                args: array(
                    0: Arg(
                        value: Expr_Array(
                            items: array(
                                0: Expr_ArrayItem(
                                    key: null
                                    value: Expr_Variable(
                                        name: node
                                    )
                                    byRef: false
                                    unpack: false
                                )
                            )
                        )
                        byRef: false
                        unpack: false
                    )
                )
            )
        )
        7: Stmt_Return(
            expr: Expr_Variable(
                name: tainted
            )
        )
    )
)

tree for climb_up looks like this:
Stmt_Function(
    byRef: false
    name: Identifier(
        name: climb_up
    )
    params: array(
        0: Param(
            type: Name(
                parts: array(
                    0: Node
                )
            )
            byRef: false
            variadic: false
            var: Expr_Variable(
                name: node
            )
            default: null
        )
    )
    returnType: null
    stmts: array(
        0: Stmt_Global(
            vars: array(
                0: Expr_Variable(
                    name: flag
                )
            )
        )
        1: Stmt_Global(
            vars: array(
                0: Expr_Variable(
                    name: tainted
                )
            )
        )
        2: Stmt_Global(
            vars: array(
                0: Expr_Variable(
                    name: root
                )
            )
        )
        3: Stmt_If(
            cond: Expr_BinaryOp_Equal(
                left: Expr_Variable(
                    name: flag
                )
                right: Scalar_LNumber(
                    value: 1
                )
            )
            stmts: array(
                0: Stmt_Echo(
                    exprs: array(
                        0: Scalar_String(
                            value: short-circuiting climb...
                        
                        )
                    )
                )
                1: Stmt_Expression(
                    expr: Expr_Assign(
                        var: Expr_Variable(
                            name: flag
                        )
                        expr: Scalar_LNumber(
                            value: 0
                        )
                    )
                )
                2: Stmt_Return(
                    expr: Expr_ConstFetch(
                        name: Name(
                            parts: array(
                                0: true
                            )
                        )
                    )
                )
            )
            elseifs: array(
            )
            else: null
        )
        4: Stmt_If(
            cond: Expr_BinaryOp_BooleanAnd(
                left: Expr_MethodCall(
                    var: Expr_Variable(
                        name: node
                    )
                    name: Identifier(
                        name: hasAttribute
                    )
                    args: array(
                        0: Arg(
                            value: Scalar_String(
                                value: parent
                            )
                            byRef: false
                            unpack: false
                        )
                    )
                )
                right: Expr_BinaryOp_NotIdentical(
                    left: Expr_Variable(
                        name: node
                    )
                    right: Expr_Variable(
                        name: root
                    )
                )
            )
            stmts: array(
                0: Stmt_Expression(
                    expr: Expr_Assign(
                        var: Expr_Variable(
                            name: parent
                        )
                        expr: Expr_MethodCall(
                            var: Expr_Variable(
                                name: node
                            )
                            name: Identifier(
                                name: getAttribute
                            )
                            args: array(
                                0: Arg(
                                    value: Scalar_String(
                                        value: parent
                                    )
                                    byRef: false
                                    unpack: false
                                )
                            )
                        )
                    )
                )
                1: Stmt_Expression(
                    expr: Expr_Assign(
                        var: Expr_Variable(
                            name: parent_type
                        )
                        expr: Expr_MethodCall(
                            var: Expr_Variable(
                                name: parent
                            )
                            name: Identifier(
                                name: getType
                            )
                            args: array(
                            )
                        )
                    )
                )
                2: Stmt_Expression(
                    expr: Expr_Assign(
                        var: Expr_Variable(
                            name: node_type
                        )
                        expr: Expr_MethodCall(
                            var: Expr_Variable(
                                name: node
                            )
                            name: Identifier(
                                name: getType
                            )
                            args: array(
                            )
                        )
                    )
                )
                3: Stmt_Echo(
                    exprs: array(
                        0: Expr_BinaryOp_Concat(
                            left: Expr_Variable(
                                name: node_type
                            )
                            right: Scalar_Encapsed(
                                parts: array(
                                    0: Scalar_EncapsedStringPart(
                                        value:  node has parent node with type: '
                                    )
                                    1: Expr_Variable(
                                        name: parent_type
                                    )
                                    2: Scalar_EncapsedStringPart(
                                        value: '
                                    
                                    )
                                )
                            )
                        )
                    )
                )
                4: Stmt_If(
                    cond: Expr_BinaryOp_Equal(
                        left: Expr_Variable(
                            name: node_type
                        )
                        right: Scalar_String(
                            value: Expr_FuncCall
                        )
                    )
                    stmts: array(
                        0: Stmt_Echo(
                            exprs: array(
                                0: Scalar_String(
                                    value: caught function node. 
                                )
                            )
                        )
                        1: Stmt_Expression(
                            expr: Expr_Assign(
                                var: Expr_Variable(
                                    name: flag
                                )
                                expr: Expr_FuncCall(
                                    name: Name(
                                        parts: array(
                                            0: is_safe
                                        )
                                    )
                                    args: array(
                                        0: Arg(
                                            value: Expr_Variable(
                                                name: node
                                            )
                                            byRef: false
                                            unpack: false
                                        )
                                    )
                                )
                            )
                        )
                    )
                    elseifs: array(
                    )
                    else: null
                )
                5: Stmt_Return(
                    expr: Expr_FuncCall(
                        name: Name(
                            parts: array(
                                0: climb_up
                            )
                        )
                        args: array(
                            0: Arg(
                                value: Expr_Variable(
                                    name: parent
                                )
                                byRef: false
                                unpack: false
                            )
                        )
                    )
                )
            )
            elseifs: array(
                0: Stmt_ElseIf(
                    cond: Expr_BinaryOp_Identical(
                        left: Expr_Variable(
                            name: node
                        )
                        right: Expr_Variable(
                            name: root
                        )
                    )
                    stmts: array(
                        0: Stmt_Echo(
                            exprs: array(
                                0: Scalar_String(
                                    value: reached root, stopping climb 
                                
                                )
                            )
                        )
                        1: Stmt_Expression(
                            expr: Expr_Assign(
                                var: Expr_Variable(
                                    name: tainted
                                )
                                expr: Expr_ConstFetch(
                                    name: Name(
                                        parts: array(
                                            0: true
                                        )
                                    )
                                )
                            )
                        )
                        2: Stmt_Return(
                            expr: Expr_ConstFetch(
                                name: Name(
                                    parts: array(
                                        0: false
                                    )
                                )
                            )
                        )
                    )
                )
            )
            else: Stmt_Else(
                stmts: array(
                    0: Stmt_Expression(
                        expr: Expr_Assign(
                            var: Expr_Variable(
                                name: node_type
                            )
                            expr: Expr_MethodCall(
                                var: Expr_Variable(
                                    name: node
                                )
                                name: Identifier(
                                    name: getType
                                )
                                args: array(
                                )
                            )
                        )
                    )
                    1: Stmt_Echo(
                        exprs: array(
                            0: Expr_BinaryOp_Concat(
                                left: Expr_BinaryOp_Concat(
                                    left: Scalar_String(
                                        value: node 
                                    )
                                    right: Expr_Variable(
                                        name: node_type
                                    )
                                )
                                right: Scalar_String(
                                    value:  does not have a parent
                                
                                )
                            )
                        )
                    )
                    2: Stmt_Expression(
                        expr: Expr_Assign(
                            var: Expr_Variable(
                                name: tainted
                            )
                            expr: Expr_ConstFetch(
                                name: Name(
                                    parts: array(
                                        0: true
                                    )
                                )
                            )
                        )
                    )
                    3: Stmt_Return(
                        expr: Expr_ConstFetch(
                            name: Name(
                                parts: array(
                                    0: false
                                )
                            )
                        )
                    )
                )
            )
        )
    )
)

tree for is_safe looks like this:
Stmt_Function(
    byRef: false
    name: Identifier(
        name: is_safe
    )
    params: array(
        0: Param(
            type: Name(
                parts: array(
                    0: Node
                )
            )
            byRef: false
            variadic: false
            var: Expr_Variable(
                name: func_node
            )
            default: null
        )
    )
    returnType: null
    stmts: array(
        0: Stmt_Expression(
            expr: Expr_Include(
                expr: Scalar_String(
                    value: /home/chao/sql-injection-scanner/SSS.php
                )
                type: TYPE_INCLUDE (1)
            )
        )
        1: Stmt_Echo(
            exprs: array(
                0: Expr_BinaryOp_Concat(
                    left: Expr_BinaryOp_Concat(
                        left: Scalar_String(
                            value: checking if 
                        )
                        right: Expr_MethodCall(
                            var: Expr_Variable(
                                name: func_node
                            )
                            name: Identifier(
                                name: getType
                            )
                            args: array(
                            )
                        )
                    )
                    right: Scalar_String(
                        value:  is in sanitizers list...
                    
                    )
                )
            )
        )
        2: Stmt_Expression(
            expr: Expr_Assign(
                var: Expr_Variable(
                    name: fname
                )
                expr: Expr_PropertyFetch(
                    var: Expr_Variable(
                        name: func_node
                    )
                    name: Identifier(
                        name: name
                    )
                )
            )
        )
        3: Stmt_Echo(
            exprs: array(
                0: Expr_BinaryOp_Concat(
                    left: Expr_BinaryOp_Concat(
                        left: Scalar_String(
                            value: NAME : 
                        )
                        right: Expr_Variable(
                            name: fname
                        )
                    )
                    right: Scalar_String(
                        value: 
                    
                    )
                )
            )
        )
        4: Stmt_If(
            cond: Expr_FuncCall(
                name: Name(
                    parts: array(
                        0: in_array
                    )
                )
                args: array(
                    0: Arg(
                        value: Expr_Variable(
                            name: fname
                        )
                        byRef: false
                        unpack: false
                    )
                    1: Arg(
                        value: Expr_Variable(
                            name: sanitizers
                        )
                        byRef: false
                        unpack: false
                    )
                )
            )
            stmts: array(
                0: Stmt_Echo(
                    exprs: array(
                        0: Scalar_String(
                            value: function is in sanitizers list. input is (probably) sanitized.
                        
                        )
                    )
                )
                1: Stmt_Return(
                    expr: Scalar_LNumber(
                        value: 1
                    )
                )
            )
            elseifs: array(
            )
            else: Stmt_Else(
                stmts: array(
                    0: Stmt_Echo(
                        exprs: array(
                            0: Scalar_String(
                                value: function call is not sanitizer function
                            
                            )
                        )
                    )
                    1: Stmt_Echo(
                        exprs: array(
                            0: Scalar_String(
                                value: continue climb..
                            
                            )
                        )
                    )
                    2: Stmt_Return(
                        expr: Scalar_LNumber(
                            value: 0
                        )
                    )
                )
            )
        )
    )
)

tree for FuncScan looks like this:
Stmt_Class(
    flags: 0
    name: Identifier(
        name: FuncScan
    )
    extends: Name(
        parts: array(
            0: NodeVisitorAbstract
        )
    )
    implements: array(
    )
    stmts: array(
        0: Stmt_ClassMethod(
            flags: MODIFIER_PUBLIC (1)
            byRef: false
            name: Identifier(
                name: enterNode
            )
            params: array(
            )
            returnType: null
            stmts: array(
            )
        )
    )
)

tree for InspectorGadget looks like this:
Stmt_Class(
    flags: 0
    name: Identifier(
        name: InspectorGadget
    )
    extends: Name(
        parts: array(
            0: NodeVisitorAbstract
        )
    )
    implements: array(
    )
    stmts: array(
        0: Stmt_ClassMethod(
            flags: MODIFIER_PUBLIC (1)
            byRef: false
            name: Identifier(
                name: enterNode
            )
            params: array(
                0: Param(
                    type: Name(
                        parts: array(
                            0: Node
                        )
                    )
                    byRef: false
                    variadic: false
                    var: Expr_Variable(
                        name: node
                    )
                    default: null
                )
            )
            returnType: null
            stmts: array(
            )
        )
    )
)

tree for Snail looks like this:
Stmt_Class(
    flags: 0
    name: Identifier(
        name: Snail
    )
    extends: Name(
        parts: array(
            0: NodeVisitorAbstract
        )
    )
    implements: array(
    )
    stmts: array(
        0: Stmt_ClassMethod(
            flags: MODIFIER_PUBLIC (1)
            byRef: false
            name: Identifier(
                name: enterNode
            )
            params: array(
                0: Param(
                    type: Name(
                        parts: array(
                            0: Node
                        )
                    )
                    byRef: false
                    variadic: false
                    var: Expr_Variable(
                        name: node
                    )
                    default: null
                )
            )
            returnType: null
            stmts: array(
                0: Stmt_Expression(
                    expr: Expr_Include(
                        expr: Scalar_String(
                            value: /home/chao/sql-injection-scanner/SSS.php
                        )
                        type: TYPE_INCLUDE (1)
                    )
                )
                1: Stmt_Global(
                    vars: array(
                        0: Expr_Variable(
                            name: CLEAR
                        )
                    )
                )
                2: Stmt_Global(
                    vars: array(
                        0: Expr_Variable(
                            name: DIRTY
                        )
                    )
                )
                3: Stmt_Global(
                    vars: array(
                        0: Expr_Variable(
                            name: INSTANCES
                        )
                    )
                )
                4: Stmt_If(
                    cond: Expr_Instanceof(
                        expr: Expr_Variable(
                            name: node
                        )
                        class: Name(
                            parts: array(
                                0: Node
                                1: Stmt
                                2: Class_
                            )
                        )
                    )
                    stmts: array(
                        0: Stmt_Echo(
                            exprs: array(
                                0: Scalar_String(
                                    value: 
                                skipping over class decleration
                                
                                )
                            )
                        )
                        1: Stmt_Echo(
                            exprs: array(
                                0: Expr_BinaryOp_Concat(
                                    left: Expr_BinaryOp_Concat(
                                        left: Expr_BinaryOp_Concat(
                                            left: Expr_BinaryOp_Concat(
                                                left: Scalar_String(
                                                    value: on line 
                                                )
                                                right: Expr_MethodCall(
                                                    var: Expr_Variable(
                                                        name: node
                                                    )
                                                    name: Identifier(
                                                        name: getLine
                                                    )
                                                    args: array(
                                                    )
                                                )
                                            )
                                            right: Scalar_String(
                                                value:  with name 
                                            )
                                        )
                                        right: Expr_PropertyFetch(
                                            var: Expr_Variable(
                                                name: node
                                            )
                                            name: Identifier(
                                                name: name
                                            )
                                        )
                                    )
                                    right: Scalar_String(
                                        value: 
                                    
                                    )
                                )
                            )
                        )
                        2: Stmt_Return(
                            expr: Expr_ClassConstFetch(
                                class: Name(
                                    parts: array(
                                        0: NodeTraverser
                                    )
                                )
                                name: Identifier(
                                    name: DONT_TRAVERSE_CHILDREN
                                )
                            )
                        )
                    )
                    elseifs: array(
                        0: Stmt_ElseIf(
                            cond: Expr_Instanceof(
                                expr: Expr_Variable(
                                    name: node
                                )
                                class: Name(
                                    parts: array(
                                        0: Node
                                        1: Stmt
                                        2: Function_
                                    )
                                )
                            )
                            stmts: array(
                                0: Stmt_Echo(
                                    exprs: array(
                                        0: Scalar_String(
                                            value: 
                                        skipping over a function decleration
                                        
                                        )
                                    )
                                )
                                1: Stmt_Echo(
                                    exprs: array(
                                        0: Expr_BinaryOp_Concat(
                                            left: Expr_BinaryOp_Concat(
                                                left: Expr_BinaryOp_Concat(
                                                    left: Expr_BinaryOp_Concat(
                                                        left: Scalar_String(
                                                            value: on line 
                                                        )
                                                        right: Expr_MethodCall(
                                                            var: Expr_Variable(
                                                                name: node
                                                            )
                                                            name: Identifier(
                                                                name: getLine
                                                            )
                                                            args: array(
                                                            )
                                                        )
                                                    )
                                                    right: Scalar_String(
                                                        value:  with name 
                                                    )
                                                )
                                                right: Expr_PropertyFetch(
                                                    var: Expr_Variable(
                                                        name: node
                                                    )
                                                    name: Identifier(
                                                        name: name
                                                    )
                                                )
                                            )
                                            right: Scalar_String(
                                                value: 
                                            
                                            )
                                        )
                                    )
                                )
                                2: Stmt_Return(
                                    expr: Expr_ClassConstFetch(
                                        class: Name(
                                            parts: array(
                                                0: NodeTraverser
                                            )
                                        )
                                        name: Identifier(
                                            name: DONT_TRAVERSE_CHILDREN
                                        )
                                    )
                                )
                            )
                        )
                        1: Stmt_ElseIf(
                            cond: Expr_BinaryOp_BooleanAnd(
                                left: Expr_Instanceof(
                                    expr: Expr_Variable(
                                        name: node
                                    )
                                    class: Name(
                                        parts: array(
                                            0: Node
                                            1: Expr
                                            2: Assign
                                        )
                                    )
                                )
                                right: Expr_Instanceof(
                                    expr: Expr_PropertyFetch(
                                        var: Expr_Variable(
                                            name: node
                                        )
                                        name: Identifier(
                                            name: expr
                                        )
                                    )
                                    class: Name(
                                        parts: array(
                                            0: Node
                                            1: Expr
                                            2: New_
                                        )
                                    )
                                )
                            )
                            stmts: array(
                                0: Stmt_Echo(
                                    exprs: array(
                                        0: Expr_BinaryOp_Concat(
                                            left: Expr_BinaryOp_Concat(
                                                left: Scalar_String(
                                                    value: 
                                                found assingment with call to 'new' on line :
                                                )
                                                right: Expr_MethodCall(
                                                    var: Expr_Variable(
                                                        name: node
                                                    )
                                                    name: Identifier(
                                                        name: getLine
                                                    )
                                                    args: array(
                                                    )
                                                )
                                            )
                                            right: Scalar_String(
                                                value: 
                                            
                                            )
                                        )
                                    )
                                )
                                1: Stmt_Echo(
                                    exprs: array(
                                        0: Expr_BinaryOp_Concat(
                                            left: Expr_BinaryOp_Concat(
                                                left: Expr_BinaryOp_Concat(
                                                    left: Expr_PropertyFetch(
                                                        var: Expr_PropertyFetch(
                                                            var: Expr_Variable(
                                                                name: node
                                                            )
                                                            name: Identifier(
                                                                name: var
                                                            )
                                                        )
                                                        name: Identifier(
                                                            name: name
                                                        )
                                                    )
                                                    right: Scalar_String(
                                                        value:  is an instance of 
                                                    )
                                                )
                                                right: Expr_PropertyFetch(
                                                    var: Expr_PropertyFetch(
                                                        var: Expr_Variable(
                                                            name: node
                                                        )
                                                        name: Identifier(
                                                            name: expr
                                                        )
                                                    )
                                                    name: Identifier(
                                                        name: class
                                                    )
                                                )
                                            )
                                            right: Scalar_String(
                                                value: 
                                            
                                            
                                            )
                                        )
                                    )
                                )
                                2: Stmt_Expression(
                                    expr: Expr_Assign(
                                        var: Expr_ArrayDimFetch(
                                            var: Expr_Variable(
                                                name: INSTANCES
                                            )
                                            dim: Expr_PropertyFetch(
                                                var: Expr_PropertyFetch(
                                                    var: Expr_Variable(
                                                        name: node
                                                    )
                                                    name: Identifier(
                                                        name: var
                                                    )
                                                )
                                                name: Identifier(
                                                    name: name
                                                )
                                            )
                                        )
                                        expr: Expr_ArrayDimFetch(
                                            var: Expr_PropertyFetch(
                                                var: Expr_PropertyFetch(
                                                    var: Expr_PropertyFetch(
                                                        var: Expr_Variable(
                                                            name: node
                                                        )
                                                        name: Identifier(
                                                            name: expr
                                                        )
                                                    )
                                                    name: Identifier(
                                                        name: class
                                                    )
                                                )
                                                name: Identifier(
                                                    name: parts
                                                )
                                            )
                                            dim: Scalar_LNumber(
                                                value: 0
                                            )
                                        )
                                    )
                                )
                            )
                        )
                        2: Stmt_ElseIf(
                            cond: Expr_BinaryOp_BooleanAnd(
                                left: Expr_Instanceof(
                                    expr: Expr_Variable(
                                        name: node
                                    )
                                    class: Name(
                                        parts: array(
                                            0: Node
                                            1: Expr
                                            2: Assign
                                        )
                                    )
                                )
                                right: Expr_Instanceof(
                                    expr: Expr_PropertyFetch(
                                        var: Expr_Variable(
                                            name: node
                                        )
                                        name: Identifier(
                                            name: var
                                        )
                                    )
                                    class: Name(
                                        parts: array(
                                            0: Node
                                            1: Expr
                                            2: ArrayDimFetch
                                        )
                                    )
                                )
                            )
                            stmts: array(
                                0: Stmt_Echo(
                                    exprs: array(
                                        0: Expr_BinaryOp_Concat(
                                            left: Scalar_String(
                                                value: found an array FETCH on line
                                            )
                                            right: Expr_MethodCall(
                                                var: Expr_Variable(
                                                    name: node
                                                )
                                                name: Identifier(
                                                    name: getLine
                                                )
                                                args: array(
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        )
                        3: Stmt_ElseIf(
                            cond: Expr_Instanceof(
                                expr: Expr_Variable(
                                    name: node
                                )
                                class: Name(
                                    parts: array(
                                        0: Node
                                        1: Expr
                                        2: Assign
                                    )
                                )
                            )
                            stmts: array(
                                0: Stmt_Echo(
                                    exprs: array(
                                        0: Expr_BinaryOp_Concat(
                                            left: Expr_BinaryOp_Concat(
                                                left: Scalar_String(
                                                    value: found an assignment at line 
                                                )
                                                right: Expr_MethodCall(
                                                    var: Expr_Variable(
                                                        name: node
                                                    )
                                                    name: Identifier(
                                                        name: getLine
                                                    )
                                                    args: array(
                                                    )
                                                )
                                            )
                                            right: Scalar_String(
                                                value: 
                                            
                                            )
                                        )
                                    )
                                )
                                1: Stmt_Echo(
                                    exprs: array(
                                        0: Expr_BinaryOp_Concat(
                                            left: Expr_BinaryOp_Concat(
                                                left: Scalar_String(
                                                    value: var is: 
                                                )
                                                right: Expr_PropertyFetch(
                                                    var: Expr_PropertyFetch(
                                                        var: Expr_Variable(
                                                            name: node
                                                        )
                                                        name: Identifier(
                                                            name: var
                                                        )
                                                    )
                                                    name: Identifier(
                                                        name: name
                                                    )
                                                )
                                            )
                                            right: Scalar_String(
                                                value: 
                                            
                                            )
                                        )
                                    )
                                )
                                2: Stmt_Echo(
                                    exprs: array(
                                        0: Expr_BinaryOp_Concat(
                                            left: Expr_BinaryOp_Concat(
                                                left: Scalar_String(
                                                    value: calling is_tainted on: 
                                                )
                                                right: Expr_MethodCall(
                                                    var: Expr_PropertyFetch(
                                                        var: Expr_Variable(
                                                            name: node
                                                        )
                                                        name: Identifier(
                                                            name: expr
                                                        )
                                                    )
                                                    name: Identifier(
                                                        name: getType
                                                    )
                                                    args: array(
                                                    )
                                                )
                                            )
                                            right: Scalar_String(
                                                value: 
                                            
                                            )
                                        )
                                    )
                                )
                                3: Stmt_Expression(
                                    expr: Expr_Assign(
                                        var: Expr_Variable(
                                            name: vname
                                        )
                                        expr: Expr_PropertyFetch(
                                            var: Expr_PropertyFetch(
                                                var: Expr_Variable(
                                                    name: node
                                                )
                                                name: Identifier(
                                                    name: var
                                                )
                                            )
                                            name: Identifier(
                                                name: name
                                            )
                                        )
                                    )
                                )
                                4: Stmt_If(
                                    cond: Expr_FuncCall(
                                        name: Name(
                                            parts: array(
                                                0: is_tainted
                                            )
                                        )
                                        args: array(
                                            0: Arg(
                                                value: Expr_PropertyFetch(
                                                    var: Expr_Variable(
                                                        name: node
                                                    )
                                                    name: Identifier(
                                                        name: expr
                                                    )
                                                )
                                                byRef: false
                                                unpack: false
                                            )
                                        )
                                    )
                                    stmts: array(
                                        0: Stmt_If(
                                            cond: Expr_MethodCall(
                                                var: Expr_Variable(
                                                    name: CLEAR
                                                )
                                                name: Identifier(
                                                    name: contains
                                                )
                                                args: array(
                                                    0: Arg(
                                                        value: Expr_Variable(
                                                            name: vname
                                                        )
                                                        byRef: false
                                                        unpack: false
                                                    )
                                                )
                                            )
                                            stmts: array(
                                                0: Stmt_Expression(
                                                    expr: Expr_MethodCall(
                                                        var: Expr_Variable(
                                                            name: CLEAR
                                                        )
                                                        name: Identifier(
                                                            name: remove
                                                        )
                                                        args: array(
                                                            0: Arg(
                                                                value: Expr_Variable(
                                                                    name: vname
                                                                )
                                                                byRef: false
                                                                unpack: false
                                                            )
                                                        )
                                                    )
                                                )
                                                1: Stmt_Echo(
                                                    exprs: array(
                                                        0: Scalar_Encapsed(
                                                            parts: array(
                                                                0: Scalar_EncapsedStringPart(
                                                                    value: removed 
                                                                )
                                                                1: Expr_Variable(
                                                                    name: vname
                                                                )
                                                                2: Scalar_EncapsedStringPart(
                                                                    value:  from clear
                                                                
                                                                
                                                                )
                                                            )
                                                        )
                                                    )
                                                )
                                            )
                                            elseifs: array(
                                            )
                                            else: null
                                        )
                                        1: Stmt_If(
                                            cond: Expr_BooleanNot(
                                                expr: Expr_MethodCall(
                                                    var: Expr_Variable(
                                                        name: DIRTY
                                                    )
                                                    name: Identifier(
                                                        name: contains
                                                    )
                                                    args: array(
                                                        0: Arg(
                                                            value: Expr_Variable(
                                                                name: vname
                                                            )
                                                            byRef: false
                                                            unpack: false
                                                        )
                                                    )
                                                )
                                            )
                                            stmts: array(
                                                0: Stmt_Expression(
                                                    expr: Expr_MethodCall(
                                                        var: Expr_Variable(
                                                            name: DIRTY
                                                        )
                                                        name: Identifier(
                                                            name: add
                                                        )
                                                        args: array(
                                                            0: Arg(
                                                                value: Expr_Variable(
                                                                    name: vname
                                                                )
                                                                byRef: false
                                                                unpack: false
                                                            )
                                                        )
                                                    )
                                                )
                                                1: Stmt_Echo(
                                                    exprs: array(
                                                        0: Scalar_Encapsed(
                                                            parts: array(
                                                                0: Scalar_EncapsedStringPart(
                                                                    value: added 
                                                                )
                                                                1: Expr_Variable(
                                                                    name: vname
                                                                )
                                                                2: Scalar_EncapsedStringPart(
                                                                    value:  to dirty
                                                                
                                                                
                                                                )
                                                            )
                                                        )
                                                    )
                                                )
                                            )
                                            elseifs: array(
                                            )
                                            else: null
                                        )
                                    )
                                    elseifs: array(
                                    )
                                    else: Stmt_Else(
                                        stmts: array(
                                            0: Stmt_If(
                                                cond: Expr_MethodCall(
                                                    var: Expr_Variable(
                                                        name: DIRTY
                                                    )
                                                    name: Identifier(
                                                        name: contains
                                                    )
                                                    args: array(
                                                        0: Arg(
                                                            value: Expr_Variable(
                                                                name: vname
                                                            )
                                                            byRef: false
                                                            unpack: false
                                                        )
                                                    )
                                                )
                                                stmts: array(
                                                    0: Stmt_Expression(
                                                        expr: Expr_MethodCall(
                                                            var: Expr_Variable(
                                                                name: DIRTY
                                                            )
                                                            name: Identifier(
                                                                name: remove
                                                            )
                                                            args: array(
                                                                0: Arg(
                                                                    value: Expr_Variable(
                                                                        name: vname
                                                                    )
                                                                    byRef: false
                                                                    unpack: false
                                                                )
                                                            )
                                                        )
                                                    )
                                                    1: Stmt_Echo(
                                                        exprs: array(
                                                            0: Scalar_Encapsed(
                                                                parts: array(
                                                                    0: Scalar_EncapsedStringPart(
                                                                        value: removed 
                                                                    )
                                                                    1: Expr_Variable(
                                                                        name: vname
                                                                    )
                                                                    2: Scalar_EncapsedStringPart(
                                                                        value:  from dirty
                                                                    
                                                                    
                                                                    )
                                                                )
                                                            )
                                                        )
                                                    )
                                                )
                                                elseifs: array(
                                                )
                                                else: null
                                            )
                                            1: Stmt_If(
                                                cond: Expr_BooleanNot(
                                                    expr: Expr_MethodCall(
                                                        var: Expr_Variable(
                                                            name: CLEAR
                                                        )
                                                        name: Identifier(
                                                            name: contains
                                                        )
                                                        args: array(
                                                            0: Arg(
                                                                value: Expr_Variable(
                                                                    name: vname
                                                                )
                                                                byRef: false
                                                                unpack: false
                                                            )
                                                        )
                                                    )
                                                )
                                                stmts: array(
                                                    0: Stmt_Expression(
                                                        expr: Expr_MethodCall(
                                                            var: Expr_Variable(
                                                                name: CLEAR
                                                            )
                                                            name: Identifier(
                                                                name: add
                                                            )
                                                            args: array(
                                                                0: Arg(
                                                                    value: Expr_Variable(
                                                                        name: vname
                                                                    )
                                                                    byRef: false
                                                                    unpack: false
                                                                )
                                                            )
                                                        )
                                                    )
                                                    1: Stmt_Echo(
                                                        exprs: array(
                                                            0: Scalar_Encapsed(
                                                                parts: array(
                                                                    0: Scalar_EncapsedStringPart(
                                                                        value: added 
                                                                    )
                                                                    1: Expr_Variable(
                                                                        name: vname
                                                                    )
                                                                    2: Scalar_EncapsedStringPart(
                                                                        value:  to clear
                                                                    
                                                                    
                                                                    )
                                                                )
                                                            )
                                                        )
                                                    )
                                                )
                                                elseifs: array(
                                                )
                                                else: null
                                            )
                                            2: Stmt_Return(
                                                expr: Expr_ClassConstFetch(
                                                    class: Name(
                                                        parts: array(
                                                            0: NodeTraverser
                                                        )
                                                    )
                                                    name: Identifier(
                                                        name: DONT_TRAVERSE_CHILDREN
                                                    )
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        )
                        4: Stmt_ElseIf(
                            cond: Expr_BinaryOp_BooleanAnd(
                                left: Expr_Instanceof(
                                    expr: Expr_Variable(
                                        name: node
                                    )
                                    class: Name(
                                        parts: array(
                                            0: Node
                                            1: Expr
                                            2: FuncCall
                                        )
                                    )
                                )
                                right: Expr_FuncCall(
                                    name: Name(
                                        parts: array(
                                            0: in_array
                                        )
                                    )
                                    args: array(
                                        0: Arg(
                                            value: Expr_PropertyFetch(
                                                var: Expr_Variable(
                                                    name: node
                                                )
                                                name: Identifier(
                                                    name: name
                                                )
                                            )
                                            byRef: false
                                            unpack: false
                                        )
                                        1: Arg(
                                            value: Expr_Variable(
                                                name: sinks
                                            )
                                            byRef: false
                                            unpack: false
                                        )
                                    )
                                )
                            )
                            stmts: array(
                                0: Stmt_Echo(
                                    exprs: array(
                                        0: Expr_BinaryOp_Concat(
                                            left: Expr_BinaryOp_Concat(
                                                left: Expr_BinaryOp_Concat(
                                                    left: Expr_BinaryOp_Concat(
                                                        left: Scalar_String(
                                                            value: SINK FUNCTION CALL:
                                                        
                                                        )
                                                        right: Scalar_Encapsed(
                                                            parts: array(
                                                                0: Scalar_EncapsedStringPart(
                                                                    value: NAME: 
                                                                )
                                                                1: Expr_PropertyFetch(
                                                                    var: Expr_Variable(
                                                                        name: node
                                                                    )
                                                                    name: Identifier(
                                                                        name: name
                                                                    )
                                                                )
                                                                2: Scalar_EncapsedStringPart(
                                                                    value:  
                                                                
                                                                )
                                                            )
                                                        )
                                                    )
                                                    right: Scalar_String(
                                                        value: LINE: 
                                                    )
                                                )
                                                right: Expr_MethodCall(
                                                    var: Expr_Variable(
                                                        name: node
                                                    )
                                                    name: Identifier(
                                                        name: getLine
                                                    )
                                                    args: array(
                                                    )
                                                )
                                            )
                                            right: Scalar_String(
                                                value: 
                                            
                                            )
                                        )
                                    )
                                )
                                1: Stmt_Expression(
                                    expr: Expr_Assign(
                                        var: Expr_Variable(
                                            name: i
                                        )
                                        expr: Scalar_LNumber(
                                            value: 0
                                        )
                                    )
                                )
                                2: Stmt_Expression(
                                    expr: Expr_Assign(
                                        var: Expr_Variable(
                                            name: i_t
                                        )
                                        expr: Scalar_LNumber(
                                            value: 0
                                        )
                                    )
                                )
                                3: Stmt_Foreach(
                                    expr: Expr_PropertyFetch(
                                        var: Expr_Variable(
                                            name: node
                                        )
                                        name: Identifier(
                                            name: args
                                        )
                                    )
                                    keyVar: null
                                    byRef: false
                                    valueVar: Expr_Variable(
                                        name: ar
                                    )
                                    stmts: array(
                                        0: Stmt_Expression(
                                            expr: Expr_Assign(
                                                var: Expr_Variable(
                                                    name: t
                                                )
                                                expr: Expr_FuncCall(
                                                    name: Name(
                                                        parts: array(
                                                            0: is_tainted
                                                        )
                                                    )
                                                    args: array(
                                                        0: Arg(
                                                            value: Expr_Variable(
                                                                name: ar
                                                            )
                                                            byRef: false
                                                            unpack: false
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                        1: Stmt_Expression(
                                            expr: Expr_Assign(
                                                var: Expr_Variable(
                                                    name: x
                                                )
                                                expr: Expr_Ternary(
                                                    cond: Expr_Variable(
                                                        name: t
                                                    )
                                                    if: Scalar_String(
                                                        value: tainted
                                                    )
                                                    else: Scalar_String(
                                                        value: safe
                                                    )
                                                )
                                            )
                                        )
                                        2: Stmt_Echo(
                                            exprs: array(
                                                0: Expr_BinaryOp_Concat(
                                                    left: Expr_BinaryOp_Concat(
                                                        left: Scalar_Encapsed(
                                                            parts: array(
                                                                0: Scalar_EncapsedStringPart(
                                                                    value: arg #
                                                                )
                                                                1: Expr_Variable(
                                                                    name: i
                                                                )
                                                                2: Scalar_EncapsedStringPart(
                                                                    value:  : 
                                                                )
                                                            )
                                                        )
                                                        right: Expr_Variable(
                                                            name: x
                                                        )
                                                    )
                                                    right: Scalar_String(
                                                        value: 
                                                    
                                                    )
                                                )
                                            )
                                        )
                                        3: Stmt_If(
                                            cond: Expr_Variable(
                                                name: t
                                            )
                                            stmts: array(
                                                0: Stmt_Expression(
                                                    expr: Expr_PostInc(
                                                        var: Expr_Variable(
                                                            name: i_t
                                                        )
                                                    )
                                                )
                                            )
                                            elseifs: array(
                                            )
                                            else: null
                                        )
                                        4: Stmt_Expression(
                                            expr: Expr_PostInc(
                                                var: Expr_Variable(
                                                    name: i
                                                )
                                            )
                                        )
                                    )
                                )
                                4: Stmt_Echo(
                                    exprs: array(
                                        0: Scalar_Encapsed(
                                            parts: array(
                                                0: Expr_Variable(
                                                    name: i_t
                                                )
                                                1: Scalar_EncapsedStringPart(
                                                    value:  of total 
                                                )
                                                2: Expr_Variable(
                                                    name: i
                                                )
                                                3: Scalar_EncapsedStringPart(
                                                    value:  arguments are tainted.
                                                
                                                )
                                            )
                                        )
                                    )
                                )
                                5: Stmt_If(
                                    cond: Expr_Variable(
                                        name: i_t
                                    )
                                    stmts: array(
                                        0: Stmt_Echo(
                                            exprs: array(
                                                0: Scalar_String(
                                                    value: ------------------------------------------
                                                
                                                )
                                            )
                                        )
                                        1: Stmt_Echo(
                                            exprs: array(
                                                0: Expr_BinaryOp_Concat(
                                                    left: Expr_BinaryOp_Concat(
                                                        left: Expr_BinaryOp_Concat(
                                                            left: Expr_BinaryOp_Concat(
                                                                left: Scalar_String(
                                                                    value: ALERT: tainted input given to sink function(
                                                                )
                                                                right: Expr_PropertyFetch(
                                                                    var: Expr_Variable(
                                                                        name: node
                                                                    )
                                                                    name: Identifier(
                                                                        name: name
                                                                    )
                                                                )
                                                            )
                                                            right: Scalar_String(
                                                                value: ) on line 
                                                            )
                                                        )
                                                        right: Expr_MethodCall(
                                                            var: Expr_Variable(
                                                                name: node
                                                            )
                                                            name: Identifier(
                                                                name: getLine
                                                            )
                                                            args: array(
                                                            )
                                                        )
                                                    )
                                                    right: Scalar_String(
                                                        value: !
                                                    
                                                    )
                                                )
                                            )
                                        )
                                        2: Stmt_Echo(
                                            exprs: array(
                                                0: Scalar_String(
                                                    value: ------------------------------------------
                                                
                                                )
                                            )
                                        )
                                    )
                                    elseifs: array(
                                    )
                                    else: null
                                )
                            )
                        )
                    )
                    else: null
                )
                5: Stmt_Nop(
                )
            )
        )
    )
)

tree for Screamer looks like this:
Stmt_Class(
    flags: 0
    name: Identifier(
        name: Screamer
    )
    extends: Name(
        parts: array(
            0: NodeVisitorAbstract
        )
    )
    implements: array(
    )
    stmts: array(
        0: Stmt_ClassMethod(
            flags: MODIFIER_PUBLIC (1)
            byRef: false
            name: Identifier(
                name: enterNode
            )
            params: array(
                0: Param(
                    type: Name(
                        parts: array(
                            0: Node
                        )
                    )
                    byRef: false
                    variadic: false
                    var: Expr_Variable(
                        name: node
                    )
                    default: null
                )
            )
            returnType: null
            stmts: array(
                0: Stmt_Expression(
                    expr: Expr_Include(
                        expr: Scalar_String(
                            value: /home/chao/sql-injection-scanner/SSS.php
                        )
                        type: TYPE_INCLUDE (1)
                    )
                )
                1: Stmt_Global(
                    vars: array(
                        0: Expr_Variable(
                            name: DIRTY
                        )
                    )
                )
                2: Stmt_Global(
                    vars: array(
                        0: Expr_Variable(
                            name: CLEAR
                        )
                    )
                )
                3: Stmt_If(
                    cond: Expr_BinaryOp_BooleanAnd(
                        left: Expr_Instanceof(
                            expr: Expr_Variable(
                                name: node
                            )
                            class: Name(
                                parts: array(
                                    0: Node
                                    1: Expr
                                    2: Variable
                                )
                            )
                        )
                        right: Expr_FuncCall(
                            name: Name(
                                parts: array(
                                    0: in_array
                                )
                            )
                            args: array(
                                0: Arg(
                                    value: Expr_BinaryOp_Concat(
                                        left: Scalar_String(
                                            value: $
                                        )
                                        right: Expr_PropertyFetch(
                                            var: Expr_Variable(
                                                name: node
                                            )
                                            name: Identifier(
                                                name: name
                                            )
                                        )
                                    )
                                    byRef: false
                                    unpack: false
                                )
                                1: Arg(
                                    value: Expr_Variable(
                                        name: sources
                                    )
                                    byRef: false
                                    unpack: false
                                )
                            )
                        )
                    )
                    stmts: array(
                        0: Stmt_Echo(
                            exprs: array(
                                0: Expr_BinaryOp_Concat(
                                    left: Expr_BinaryOp_Concat(
                                        left: Expr_BinaryOp_Concat(
                                            left: Expr_BinaryOp_Concat(
                                                left: Scalar_String(
                                                    value: found source: 
                                                )
                                                right: Expr_PropertyFetch(
                                                    var: Expr_Variable(
                                                        name: node
                                                    )
                                                    name: Identifier(
                                                        name: name
                                                    )
                                                )
                                            )
                                            right: Scalar_String(
                                                value:  at line 
                                            )
                                        )
                                        right: Expr_MethodCall(
                                            var: Expr_Variable(
                                                name: node
                                            )
                                            name: Identifier(
                                                name: getLine
                                            )
                                            args: array(
                                            )
                                        )
                                    )
                                    right: Scalar_String(
                                        value: , potential vulnerability
                                    
                                    )
                                )
                            )
                        )
                        1: Stmt_If(
                            cond: Expr_BooleanNot(
                                expr: Expr_FuncCall(
                                    name: Name(
                                        parts: array(
                                            0: climb_up
                                        )
                                    )
                                    args: array(
                                        0: Arg(
                                            value: Expr_Variable(
                                                name: node
                                            )
                                            byRef: false
                                            unpack: false
                                        )
                                    )
                                )
                            )
                            stmts: array(
                                0: Stmt_Echo(
                                    exprs: array(
                                        0: Expr_BinaryOp_Concat(
                                            left: Expr_BinaryOp_Concat(
                                                left: Expr_BinaryOp_Concat(
                                                    left: Expr_BinaryOp_Concat(
                                                        left: Scalar_String(
                                                            value: Input from 
                                                        )
                                                        right: Expr_PropertyFetch(
                                                            var: Expr_Variable(
                                                                name: node
                                                            )
                                                            name: Identifier(
                                                                name: name
                                                            )
                                                        )
                                                    )
                                                    right: Scalar_String(
                                                        value:  without sanitization at line 
                                                    )
                                                )
                                                right: Expr_MethodCall(
                                                    var: Expr_Variable(
                                                        name: node
                                                    )
                                                    name: Identifier(
                                                        name: getLine
                                                    )
                                                    args: array(
                                                    )
                                                )
                                            )
                                            right: Scalar_String(
                                                value: 
                                            
                                            )
                                        )
                                    )
                                )
                            )
                            elseifs: array(
                            )
                            else: null
                        )
                    )
                    elseifs: array(
                        0: Stmt_ElseIf(
                            cond: Expr_BinaryOp_BooleanAnd(
                                left: Expr_Instanceof(
                                    expr: Expr_Variable(
                                        name: node
                                    )
                                    class: Name(
                                        parts: array(
                                            0: Node
                                            1: Expr
                                            2: Variable
                                        )
                                    )
                                )
                                right: Expr_MethodCall(
                                    var: Expr_Variable(
                                        name: DIRTY
                                    )
                                    name: Identifier(
                                        name: contains
                                    )
                                    args: array(
                                        0: Arg(
                                            value: Expr_PropertyFetch(
                                                var: Expr_Variable(
                                                    name: node
                                                )
                                                name: Identifier(
                                                    name: name
                                                )
                                            )
                                            byRef: false
                                            unpack: false
                                        )
                                    )
                                )
                            )
                            stmts: array(
                                0: Stmt_Echo(
                                    exprs: array(
                                        0: Expr_BinaryOp_Concat(
                                            left: Expr_BinaryOp_Concat(
                                                left: Scalar_String(
                                                    value: found a tainted variable on line 
                                                )
                                                right: Expr_MethodCall(
                                                    var: Expr_Variable(
                                                        name: node
                                                    )
                                                    name: Identifier(
                                                        name: getLine
                                                    )
                                                    args: array(
                                                    )
                                                )
                                            )
                                            right: Scalar_String(
                                                value: 
                                            
                                            )
                                        )
                                    )
                                )
                                1: Stmt_If(
                                    cond: Expr_BooleanNot(
                                        expr: Expr_FuncCall(
                                            name: Name(
                                                parts: array(
                                                    0: climb_up
                                                )
                                            )
                                            args: array(
                                                0: Arg(
                                                    value: Expr_Variable(
                                                        name: node
                                                    )
                                                    byRef: false
                                                    unpack: false
                                                )
                                            )
                                        )
                                    )
                                    stmts: array(
                                        0: Stmt_Echo(
                                            exprs: array(
                                                0: Scalar_String(
                                                    value: VLN: tainted variable persists and infects
                                                
                                                )
                                            )
                                        )
                                    )
                                    elseifs: array(
                                    )
                                    else: null
                                )
                            )
                        )
                    )
                    else: null
                )
            )
        )
    )
)

tree for Librarian looks like this:
Stmt_Class(
    flags: 0
    name: Identifier(
        name: Librarian
    )
    extends: Name(
        parts: array(
            0: NodeVisitorAbstract
        )
    )
    implements: array(
    )
    stmts: array(
        0: Stmt_ClassMethod(
            flags: MODIFIER_PUBLIC (1)
            byRef: false
            name: Identifier(
                name: enterNode
            )
            params: array(
                0: Param(
                    type: Name(
                        parts: array(
                            0: Node
                        )
                    )
                    byRef: false
                    variadic: false
                    var: Expr_Variable(
                        name: node
                    )
                    default: null
                )
            )
            returnType: null
            stmts: array(
                0: Stmt_Global(
                    vars: array(
                        0: Expr_Variable(
                            name: CLASSES
                        )
                    )
                )
                1: Stmt_Global(
                    vars: array(
                        0: Expr_Variable(
                            name: FUNCTIONS
                        )
                    )
                )
                2: Stmt_Global(
                    vars: array(
                        0: Expr_Variable(
                            name: METHODS
                        )
                    )
                )
                3: Stmt_If(
                    cond: Expr_Instanceof(
                        expr: Expr_Variable(
                            name: node
                        )
                        class: Name(
                            parts: array(
                                0: Node
                                1: Stmt
                                2: Class_
                            )
                        )
                    )
                    stmts: array(
                        0: Stmt_Echo(
                            exprs: array(
                                0: Scalar_String(
                                    value: 
                                ################################################################################
                                
                                )
                            )
                        )
                        1: Stmt_Echo(
                            exprs: array(
                                0: Expr_BinaryOp_Concat(
                                    left: Expr_BinaryOp_Concat(
                                        left: Expr_BinaryOp_Concat(
                                            left: Expr_BinaryOp_Concat(
                                                left: Scalar_String(
                                                    value: found a class declaration on line 
                                                )
                                                right: Expr_MethodCall(
                                                    var: Expr_Variable(
                                                        name: node
                                                    )
                                                    name: Identifier(
                                                        name: getLine
                                                    )
                                                    args: array(
                                                    )
                                                )
                                            )
                                            right: Scalar_String(
                                                value:  with name 
                                            )
                                        )
                                        right: Expr_PropertyFetch(
                                            var: Expr_Variable(
                                                name: node
                                            )
                                            name: Identifier(
                                                name: name
                                            )
                                        )
                                    )
                                    right: Scalar_String(
                                        value: 
                                    
                                    )
                                )
                            )
                        )
                        2: Stmt_Echo(
                            exprs: array(
                                0: Scalar_String(
                                    value: ################################################################################
                                
                                
                                )
                            )
                        )
                        3: Stmt_Expression(
                            expr: Expr_Assign(
                                var: Expr_ArrayDimFetch(
                                    var: Expr_Variable(
                                        name: CLASSES
                                    )
                                    dim: Expr_PropertyFetch(
                                        var: Expr_PropertyFetch(
                                            var: Expr_Variable(
                                                name: node
                                            )
                                            name: Identifier(
                                                name: name
                                            )
                                        )
                                        name: Identifier(
                                            name: name
                                        )
                                    )
                                )
                                expr: Expr_Variable(
                                    name: node
                                )
                            )
                        )
                    )
                    elseifs: array(
                        0: Stmt_ElseIf(
                            cond: Expr_Instanceof(
                                expr: Expr_Variable(
                                    name: node
                                )
                                class: Name(
                                    parts: array(
                                        0: Node
                                        1: Stmt
                                        2: Function_
                                    )
                                )
                            )
                            stmts: array(
                                0: Stmt_Echo(
                                    exprs: array(
                                        0: Scalar_String(
                                            value: 
                                        ################################################################################
                                        
                                        )
                                    )
                                )
                                1: Stmt_Echo(
                                    exprs: array(
                                        0: Expr_BinaryOp_Concat(
                                            left: Expr_BinaryOp_Concat(
                                                left: Expr_BinaryOp_Concat(
                                                    left: Expr_BinaryOp_Concat(
                                                        left: Scalar_String(
                                                            value: found a function declaration on line 
                                                        )
                                                        right: Expr_MethodCall(
                                                            var: Expr_Variable(
                                                                name: node
                                                            )
                                                            name: Identifier(
                                                                name: getLine
                                                            )
                                                            args: array(
                                                            )
                                                        )
                                                    )
                                                    right: Scalar_String(
                                                        value:  with name 
                                                    )
                                                )
                                                right: Expr_PropertyFetch(
                                                    var: Expr_Variable(
                                                        name: node
                                                    )
                                                    name: Identifier(
                                                        name: name
                                                    )
                                                )
                                            )
                                            right: Scalar_String(
                                                value: 
                                            
                                            )
                                        )
                                    )
                                )
                                2: Stmt_Echo(
                                    exprs: array(
                                        0: Scalar_String(
                                            value: ################################################################################
                                        
                                        
                                        )
                                    )
                                )
                                3: Stmt_Expression(
                                    expr: Expr_Assign(
                                        var: Expr_ArrayDimFetch(
                                            var: Expr_Variable(
                                                name: FUNCTIONS
                                            )
                                            dim: Expr_PropertyFetch(
                                                var: Expr_PropertyFetch(
                                                    var: Expr_Variable(
                                                        name: node
                                                    )
                                                    name: Identifier(
                                                        name: name
                                                    )
                                                )
                                                name: Identifier(
                                                    name: name
                                                )
                                            )
                                        )
                                        expr: Expr_Variable(
                                            name: node
                                        )
                                    )
                                )
                            )
                        )
                        1: Stmt_ElseIf(
                            cond: Expr_Instanceof(
                                expr: Expr_Variable(
                                    name: node
                                )
                                class: Name(
                                    parts: array(
                                        0: Node
                                        1: Stmt
                                        2: ClassMethod
                                    )
                                )
                            )
                            stmts: array(
                                0: Stmt_Echo(
                                    exprs: array(
                                        0: Scalar_String(
                                            value: 
                                        ################################################################################
                                        
                                        )
                                    )
                                )
                                1: Stmt_Echo(
                                    exprs: array(
                                        0: Expr_BinaryOp_Concat(
                                            left: Expr_BinaryOp_Concat(
                                                left: Expr_BinaryOp_Concat(
                                                    left: Expr_BinaryOp_Concat(
                                                        left: Scalar_String(
                                                            value: found a class method declaration on line 
                                                        )
                                                        right: Expr_MethodCall(
                                                            var: Expr_Variable(
                                                                name: node
                                                            )
                                                            name: Identifier(
                                                                name: getLine
                                                            )
                                                            args: array(
                                                            )
                                                        )
                                                    )
                                                    right: Scalar_String(
                                                        value:  with name 
                                                    )
                                                )
                                                right: Expr_PropertyFetch(
                                                    var: Expr_Variable(
                                                        name: node
                                                    )
                                                    name: Identifier(
                                                        name: name
                                                    )
                                                )
                                            )
                                            right: Scalar_String(
                                                value: 
                                            
                                            )
                                        )
                                    )
                                )
                                2: Stmt_Echo(
                                    exprs: array(
                                        0: Scalar_String(
                                            value: ################################################################################
                                        
                                        
                                        )
                                    )
                                )
                                3: Stmt_Expression(
                                    expr: Expr_Assign(
                                        var: Expr_ArrayDimFetch(
                                            var: Expr_Variable(
                                                name: METHODS
                                            )
                                            dim: Expr_PropertyFetch(
                                                var: Expr_PropertyFetch(
                                                    var: Expr_Variable(
                                                        name: node
                                                    )
                                                    name: Identifier(
                                                        name: name
                                                    )
                                                )
                                                name: Identifier(
                                                    name: name
                                                )
                                            )
                                        )
                                        expr: Expr_Variable(
                                            name: node
                                        )
                                    )
                                )
                            )
                        )
                    )
                    else: null
                )
            )
        )
    )
)

tree for ParentConnector looks like this:
Stmt_Class(
    flags: 0
    name: Identifier(
        name: ParentConnector
    )
    extends: Name(
        parts: array(
            0: NodeVisitorAbstract
        )
    )
    implements: array(
    )
    stmts: array(
        0: Stmt_Property(
            flags: MODIFIER_PRIVATE (4)
            type: null
            props: array(
                0: Stmt_PropertyProperty(
                    name: VarLikeIdentifier(
                        name: stack
                    )
                    default: null
                )
            )
        )
        1: Stmt_ClassMethod(
            flags: MODIFIER_PUBLIC (1)
            byRef: false
            name: Identifier(
                name: beforeTraverse
            )
            params: array(
                0: Param(
                    type: Identifier(
                        name: array
                    )
                    byRef: false
                    variadic: false
                    var: Expr_Variable(
                        name: nodes
                    )
                    default: null
                )
            )
            returnType: null
            stmts: array(
                0: Stmt_Expression(
                    expr: Expr_Assign(
                        var: Expr_PropertyFetch(
                            var: Expr_Variable(
                                name: this
                            )
                            name: Identifier(
                                name: stack
                            )
                        )
                        expr: Expr_Array(
                            items: array(
                            )
                        )
                    )
                )
            )
        )
        2: Stmt_ClassMethod(
            flags: MODIFIER_PUBLIC (1)
            byRef: false
            name: Identifier(
                name: enterNode
            )
            params: array(
                0: Param(
                    type: Name(
                        parts: array(
                            0: Node
                        )
                    )
                    byRef: false
                    variadic: false
                    var: Expr_Variable(
                        name: node
                    )
                    default: null
                )
            )
            returnType: null
            stmts: array(
                0: Stmt_If(
                    cond: Expr_BooleanNot(
                        expr: Expr_Empty(
                            expr: Expr_PropertyFetch(
                                var: Expr_Variable(
                                    name: this
                                )
                                name: Identifier(
                                    name: stack
                                )
                            )
                        )
                    )
                    stmts: array(
                        0: Stmt_Expression(
                            expr: Expr_MethodCall(
                                var: Expr_Variable(
                                    name: node
                                )
                                name: Identifier(
                                    name: setAttribute
                                )
                                args: array(
                                    0: Arg(
                                        value: Scalar_String(
                                            value: parent
                                        )
                                        byRef: false
                                        unpack: false
                                    )
                                    1: Arg(
                                        value: Expr_ArrayDimFetch(
                                            var: Expr_PropertyFetch(
                                                var: Expr_Variable(
                                                    name: this
                                                )
                                                name: Identifier(
                                                    name: stack
                                                )
                                            )
                                            dim: Expr_BinaryOp_Minus(
                                                left: Expr_FuncCall(
                                                    name: Name(
                                                        parts: array(
                                                            0: count
                                                        )
                                                    )
                                                    args: array(
                                                        0: Arg(
                                                            value: Expr_PropertyFetch(
                                                                var: Expr_Variable(
                                                                    name: this
                                                                )
                                                                name: Identifier(
                                                                    name: stack
                                                                )
                                                            )
                                                            byRef: false
                                                            unpack: false
                                                        )
                                                    )
                                                )
                                                right: Scalar_LNumber(
                                                    value: 1
                                                )
                                            )
                                        )
                                        byRef: false
                                        unpack: false
                                    )
                                )
                            )
                        )
                    )
                    elseifs: array(
                    )
                    else: null
                )
                1: Stmt_Expression(
                    expr: Expr_Assign(
                        var: Expr_ArrayDimFetch(
                            var: Expr_PropertyFetch(
                                var: Expr_Variable(
                                    name: this
                                )
                                name: Identifier(
                                    name: stack
                                )
                            )
                            dim: null
                        )
                        expr: Expr_Variable(
                            name: node
                        )
                    )
                )
            )
        )
        3: Stmt_ClassMethod(
            flags: MODIFIER_PUBLIC (1)
            byRef: false
            name: Identifier(
                name: leaveNode
            )
            params: array(
                0: Param(
                    type: Name(
                        parts: array(
                            0: Node
                        )
                    )
                    byRef: false
                    variadic: false
                    var: Expr_Variable(
                        name: node
                    )
                    default: null
                )
            )
            returnType: null
            stmts: array(
                0: Stmt_Expression(
                    expr: Expr_FuncCall(
                        name: Name(
                            parts: array(
                                0: array_pop
                            )
                        )
                        args: array(
                            0: Arg(
                                value: Expr_PropertyFetch(
                                    var: Expr_Variable(
                                        name: this
                                    )
                                    name: Identifier(
                                        name: stack
                                    )
                                )
                                byRef: false
                                unpack: false
                            )
                        )
                    )
                )
            )
        )
    )
)
instances: Array
(
    [CLEAR] => Ds
    [DIRTY] => Ds
    [traverser] => NodeTraverser
    [classfinder] => NodeTraverser
    [pretraverser] => NodeTraverser
    [rii] => RecursiveIteratorIterator
    [dumper] => NodeDumper
)
